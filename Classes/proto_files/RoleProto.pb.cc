// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoleProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RoleProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tiange {
namespace mdsj {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RoleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Roler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Roler_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RoleProto_2eproto() {
  protobuf_AddDesc_RoleProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RoleProto.proto");
  GOOGLE_CHECK(file != NULL);
  RoleRequest_descriptor_ = file->message_type(0);
  static const int RoleRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, roleid_),
  };
  RoleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRequest_descriptor_,
      RoleRequest::default_instance_,
      RoleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRequest));
  Roler_descriptor_ = file->message_type(1);
  static const int Roler_offsets_[47] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, nickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, levelmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, roleindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, avatarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, upgradeexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, achievementmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, guildposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, energymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, physicalatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, physicaldef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, magicatk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, magicdef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, dex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, cri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, agl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, fc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, coins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, clothingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, usesoulnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, havesoulnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, usesoul1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, usesoul2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, vipdt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, friendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, friendmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, lastofflinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, dailyremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, dailycomplete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, dailytotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, dailyvipremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, dailyvipcomplete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, dailyviptotal_),
  };
  Roler_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Roler_descriptor_,
      Roler::default_instance_,
      Roler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roler, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Roler));
  RoleResponse_descriptor_ = file->message_type(2);
  static const int RoleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResponse, roler_),
  };
  RoleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleResponse_descriptor_,
      RoleResponse::default_instance_,
      RoleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleResponse));
  RoleResult_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RoleProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRequest_descriptor_, &RoleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Roler_descriptor_, &Roler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleResponse_descriptor_, &RoleResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RoleProto_2eproto() {
  delete RoleRequest::default_instance_;
  delete RoleRequest_reflection_;
  delete Roler::default_instance_;
  delete Roler_reflection_;
  delete RoleResponse::default_instance_;
  delete RoleResponse_reflection_;
}

void protobuf_AddDesc_RoleProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RoleProto.proto\022\025com.tiange.mdsj.proto"
    "\"\035\n\013RoleRequest\022\016\n\006roleId\030\001 \002(\005\"\340\006\n\005Role"
    "r\022\016\n\006roleId\030\001 \002(\005\022\020\n\010nickname\030\002 \002(\t\022\020\n\010l"
    "evelMax\030\003 \002(\005\022\r\n\005level\030\004 \002(\005\022\013\n\003sex\030\005 \002("
    "\005\022\021\n\troleIndex\030\006 \002(\005\022\020\n\010avatarId\030\007 \002(\005\022\013"
    "\n\003exp\030\010 \002(\005\022\022\n\nupgradeExp\030\t \002(\005\022\023\n\013achie"
    "vement\030\n \002(\005\022\026\n\016achievementMax\030\013 \002(\005\022\r\n\005"
    "title\030\014 \002(\t\022\017\n\007guildId\030\r \002(\005\022\025\n\rguildPos"
    "ition\030\016 \002(\005\022\n\n\002hp\030\017 \002(\005\022\016\n\006energy\030\020 \002(\005\022"
    "\021\n\tenergyMax\030\021 \002(\005\022\023\n\013physicalAtk\030\022 \002(\005\022"
    "\023\n\013physicalDef\030\023 \002(\005\022\020\n\010magicAtk\030\024 \002(\005\022\020"
    "\n\010magicDef\030\025 \002(\005\022\013\n\003dex\030\026 \002(\005\022\013\n\003cri\030\027 \002"
    "(\005\022\r\n\005block\030\030 \002(\005\022\013\n\003agl\030\031 \002(\005\022\n\n\002fc\030\032 \002"
    "(\005\022\014\n\004gold\030\033 \002(\005\022\r\n\005coins\030\034 \002(\005\022\020\n\010weapo"
    "nId\030\035 \002(\005\022\016\n\006headId\030\036 \002(\005\022\022\n\nclothingId\030"
    "\037 \002(\005\022\022\n\nuseSoulNum\030  \002(\005\022\023\n\013haveSoulNum"
    "\030! \002(\005\022\020\n\010useSoul1\030\" \002(\005\022\020\n\010useSoul2\030# \002"
    "(\005\022\020\n\010vipLevel\030$ \002(\005\022\r\n\005vipDt\030% \002(\005\022\021\n\tf"
    "riendNum\030& \002(\005\022\021\n\tfriendMax\030\' \002(\005\022\025\n\rlas"
    "tLoginTime\030( \002(\005\022\027\n\017lastOfflineTime\030) \002("
    "\005\022\023\n\013dailyRemain\030* \002(\005\022\025\n\rdailyComplete\030"
    "+ \002(\005\022\022\n\ndailyTotal\030, \002(\005\022\026\n\016dailyVipRem"
    "ain\030- \002(\005\022\030\n\020dailyVipComplete\030. \002(\005\022\025\n\rd"
    "ailyVipTotal\030/ \002(\005\"n\n\014RoleResponse\0221\n\006re"
    "sult\030\001 \002(\0162!.com.tiange.mdsj.proto.RoleR"
    "esult\022+\n\005roler\030\002 \002(\0132\034.com.tiange.mdsj.p"
    "roto.Roler*v\n\nRoleResult\022\020\n\014ROLE_SUCCESS"
    "\020\000\022\024\n\020ROLE_SERVER_BUSY\020\001\022\026\n\022ROLE_VERSION"
    "_LOWER\020\002\022\022\n\016ROLE_NOT_EXSIT\020\003\022\024\n\020ROLE_KEY"
    "_INVALID\020\004", 1170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RoleProto.proto", &protobuf_RegisterTypes);
  RoleRequest::default_instance_ = new RoleRequest();
  Roler::default_instance_ = new Roler();
  RoleResponse::default_instance_ = new RoleResponse();
  RoleRequest::default_instance_->InitAsDefaultInstance();
  Roler::default_instance_->InitAsDefaultInstance();
  RoleResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RoleProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RoleProto_2eproto {
  StaticDescriptorInitializer_RoleProto_2eproto() {
    protobuf_AddDesc_RoleProto_2eproto();
  }
} static_descriptor_initializer_RoleProto_2eproto_;
const ::google::protobuf::EnumDescriptor* RoleResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleResult_descriptor_;
}
bool RoleResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RoleRequest::kRoleIdFieldNumber;
#endif  // !_MSC_VER

RoleRequest::RoleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRequest::InitAsDefaultInstance() {
}

RoleRequest::RoleRequest(const RoleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRequest::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRequest::~RoleRequest() {
  SharedDtor();
}

void RoleRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRequest_descriptor_;
}

const RoleRequest& RoleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleProto_2eproto();
  return *default_instance_;
}

RoleRequest* RoleRequest::default_instance_ = NULL;

RoleRequest* RoleRequest::New() const {
  return new RoleRequest;
}

void RoleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRequest::MergeFrom(const RoleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRequest::CopyFrom(const RoleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoleRequest::Swap(RoleRequest* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRequest_descriptor_;
  metadata.reflection = RoleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Roler::kRoleIdFieldNumber;
const int Roler::kNicknameFieldNumber;
const int Roler::kLevelMaxFieldNumber;
const int Roler::kLevelFieldNumber;
const int Roler::kSexFieldNumber;
const int Roler::kRoleIndexFieldNumber;
const int Roler::kAvatarIdFieldNumber;
const int Roler::kExpFieldNumber;
const int Roler::kUpgradeExpFieldNumber;
const int Roler::kAchievementFieldNumber;
const int Roler::kAchievementMaxFieldNumber;
const int Roler::kTitleFieldNumber;
const int Roler::kGuildIdFieldNumber;
const int Roler::kGuildPositionFieldNumber;
const int Roler::kHpFieldNumber;
const int Roler::kEnergyFieldNumber;
const int Roler::kEnergyMaxFieldNumber;
const int Roler::kPhysicalAtkFieldNumber;
const int Roler::kPhysicalDefFieldNumber;
const int Roler::kMagicAtkFieldNumber;
const int Roler::kMagicDefFieldNumber;
const int Roler::kDexFieldNumber;
const int Roler::kCriFieldNumber;
const int Roler::kBlockFieldNumber;
const int Roler::kAglFieldNumber;
const int Roler::kFcFieldNumber;
const int Roler::kGoldFieldNumber;
const int Roler::kCoinsFieldNumber;
const int Roler::kWeaponIdFieldNumber;
const int Roler::kHeadIdFieldNumber;
const int Roler::kClothingIdFieldNumber;
const int Roler::kUseSoulNumFieldNumber;
const int Roler::kHaveSoulNumFieldNumber;
const int Roler::kUseSoul1FieldNumber;
const int Roler::kUseSoul2FieldNumber;
const int Roler::kVipLevelFieldNumber;
const int Roler::kVipDtFieldNumber;
const int Roler::kFriendNumFieldNumber;
const int Roler::kFriendMaxFieldNumber;
const int Roler::kLastLoginTimeFieldNumber;
const int Roler::kLastOfflineTimeFieldNumber;
const int Roler::kDailyRemainFieldNumber;
const int Roler::kDailyCompleteFieldNumber;
const int Roler::kDailyTotalFieldNumber;
const int Roler::kDailyVipRemainFieldNumber;
const int Roler::kDailyVipCompleteFieldNumber;
const int Roler::kDailyVipTotalFieldNumber;
#endif  // !_MSC_VER

Roler::Roler()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Roler::InitAsDefaultInstance() {
}

Roler::Roler(const Roler& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Roler::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  levelmax_ = 0;
  level_ = 0;
  sex_ = 0;
  roleindex_ = 0;
  avatarid_ = 0;
  exp_ = 0;
  upgradeexp_ = 0;
  achievement_ = 0;
  achievementmax_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = 0;
  guildposition_ = 0;
  hp_ = 0;
  energy_ = 0;
  energymax_ = 0;
  physicalatk_ = 0;
  physicaldef_ = 0;
  magicatk_ = 0;
  magicdef_ = 0;
  dex_ = 0;
  cri_ = 0;
  block_ = 0;
  agl_ = 0;
  fc_ = 0;
  gold_ = 0;
  coins_ = 0;
  weaponid_ = 0;
  headid_ = 0;
  clothingid_ = 0;
  usesoulnum_ = 0;
  havesoulnum_ = 0;
  usesoul1_ = 0;
  usesoul2_ = 0;
  viplevel_ = 0;
  vipdt_ = 0;
  friendnum_ = 0;
  friendmax_ = 0;
  lastlogintime_ = 0;
  lastofflinetime_ = 0;
  dailyremain_ = 0;
  dailycomplete_ = 0;
  dailytotal_ = 0;
  dailyvipremain_ = 0;
  dailyvipcomplete_ = 0;
  dailyviptotal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Roler::~Roler() {
  SharedDtor();
}

void Roler::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void Roler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Roler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Roler_descriptor_;
}

const Roler& Roler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleProto_2eproto();
  return *default_instance_;
}

Roler* Roler::default_instance_ = NULL;

Roler* Roler::New() const {
  return new Roler;
}

void Roler::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
    levelmax_ = 0;
    level_ = 0;
    sex_ = 0;
    roleindex_ = 0;
    avatarid_ = 0;
    exp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    upgradeexp_ = 0;
    achievement_ = 0;
    achievementmax_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    guildid_ = 0;
    guildposition_ = 0;
    hp_ = 0;
    energy_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    energymax_ = 0;
    physicalatk_ = 0;
    physicaldef_ = 0;
    magicatk_ = 0;
    magicdef_ = 0;
    dex_ = 0;
    cri_ = 0;
    block_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    agl_ = 0;
    fc_ = 0;
    gold_ = 0;
    coins_ = 0;
    weaponid_ = 0;
    headid_ = 0;
    clothingid_ = 0;
    usesoulnum_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    havesoulnum_ = 0;
    usesoul1_ = 0;
    usesoul2_ = 0;
    viplevel_ = 0;
    vipdt_ = 0;
    friendnum_ = 0;
    friendmax_ = 0;
    lastlogintime_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    lastofflinetime_ = 0;
    dailyremain_ = 0;
    dailycomplete_ = 0;
    dailytotal_ = 0;
    dailyvipremain_ = 0;
    dailyvipcomplete_ = 0;
    dailyviptotal_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Roler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 roleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // required string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nickname().data(), this->nickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_levelMax;
        break;
      }

      // required int32 levelMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelmax_)));
          set_has_levelmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // required int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roleIndex;
        break;
      }

      // required int32 roleIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roleindex_)));
          set_has_roleindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_avatarId;
        break;
      }

      // required int32 avatarId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avatarId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avatarid_)));
          set_has_avatarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // required int32 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_upgradeExp;
        break;
      }

      // required int32 upgradeExp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upgradeExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradeexp_)));
          set_has_upgradeexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_achievement;
        break;
      }

      // required int32 achievement = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievement_)));
          set_has_achievement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_achievementMax;
        break;
      }

      // required int32 achievementMax = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievementMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementmax_)));
          set_has_achievementmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_title;
        break;
      }

      // required string title = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_guildId;
        break;
      }

      // required int32 guildId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_guildPosition;
        break;
      }

      // required int32 guildPosition = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildposition_)));
          set_has_guildposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_hp;
        break;
      }

      // required int32 hp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_energy;
        break;
      }

      // required int32 energy = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_energyMax;
        break;
      }

      // required int32 energyMax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energyMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energymax_)));
          set_has_energymax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_physicalAtk;
        break;
      }

      // required int32 physicalAtk = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicalatk_)));
          set_has_physicalatk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_physicalDef;
        break;
      }

      // required int32 physicalDef = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicaldef_)));
          set_has_physicaldef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_magicAtk;
        break;
      }

      // required int32 magicAtk = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicAtk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicatk_)));
          set_has_magicatk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_magicDef;
        break;
      }

      // required int32 magicDef = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicDef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdef_)));
          set_has_magicdef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_dex;
        break;
      }

      // required int32 dex = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dex_)));
          set_has_dex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_cri;
        break;
      }

      // required int32 cri = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cri_)));
          set_has_cri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_block;
        break;
      }

      // required int32 block = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_agl;
        break;
      }

      // required int32 agl = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agl_)));
          set_has_agl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_fc;
        break;
      }

      // required int32 fc = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fc_)));
          set_has_fc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_gold;
        break;
      }

      // required int32 gold = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_coins;
        break;
      }

      // required int32 coins = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coins_)));
          set_has_coins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_weaponId;
        break;
      }

      // required int32 weaponId = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_headId;
        break;
      }

      // required int32 headId = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_clothingId;
        break;
      }

      // required int32 clothingId = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clothingId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clothingid_)));
          set_has_clothingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_useSoulNum;
        break;
      }

      // required int32 useSoulNum = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useSoulNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usesoulnum_)));
          set_has_usesoulnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_haveSoulNum;
        break;
      }

      // required int32 haveSoulNum = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_haveSoulNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &havesoulnum_)));
          set_has_havesoulnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_useSoul1;
        break;
      }

      // required int32 useSoul1 = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useSoul1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usesoul1_)));
          set_has_usesoul1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_useSoul2;
        break;
      }

      // required int32 useSoul2 = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useSoul2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usesoul2_)));
          set_has_usesoul2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_vipLevel;
        break;
      }

      // required int32 vipLevel = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_vipDt;
        break;
      }

      // required int32 vipDt = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipDt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipdt_)));
          set_has_vipdt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_friendNum;
        break;
      }

      // required int32 friendNum = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendnum_)));
          set_has_friendnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_friendMax;
        break;
      }

      // required int32 friendMax = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &friendmax_)));
          set_has_friendmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_lastLoginTime;
        break;
      }

      // required int32 lastLoginTime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_lastOfflineTime;
        break;
      }

      // required int32 lastOfflineTime = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastOfflineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastofflinetime_)));
          set_has_lastofflinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_dailyRemain;
        break;
      }

      // required int32 dailyRemain = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailyremain_)));
          set_has_dailyremain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_dailyComplete;
        break;
      }

      // required int32 dailyComplete = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyComplete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailycomplete_)));
          set_has_dailycomplete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_dailyTotal;
        break;
      }

      // required int32 dailyTotal = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailytotal_)));
          set_has_dailytotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_dailyVipRemain;
        break;
      }

      // required int32 dailyVipRemain = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyVipRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailyvipremain_)));
          set_has_dailyvipremain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_dailyVipComplete;
        break;
      }

      // required int32 dailyVipComplete = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyVipComplete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailyvipcomplete_)));
          set_has_dailyvipcomplete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_dailyVipTotal;
        break;
      }

      // required int32 dailyVipTotal = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyVipTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailyviptotal_)));
          set_has_dailyviptotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Roler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roleid(), output);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

  // required int32 levelMax = 3;
  if (has_levelmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->levelmax(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // required int32 roleIndex = 6;
  if (has_roleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roleindex(), output);
  }

  // required int32 avatarId = 7;
  if (has_avatarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->avatarid(), output);
  }

  // required int32 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->exp(), output);
  }

  // required int32 upgradeExp = 9;
  if (has_upgradeexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->upgradeexp(), output);
  }

  // required int32 achievement = 10;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->achievement(), output);
  }

  // required int32 achievementMax = 11;
  if (has_achievementmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->achievementmax(), output);
  }

  // required string title = 12;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->title(), output);
  }

  // required int32 guildId = 13;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->guildid(), output);
  }

  // required int32 guildPosition = 14;
  if (has_guildposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->guildposition(), output);
  }

  // required int32 hp = 15;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hp(), output);
  }

  // required int32 energy = 16;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->energy(), output);
  }

  // required int32 energyMax = 17;
  if (has_energymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->energymax(), output);
  }

  // required int32 physicalAtk = 18;
  if (has_physicalatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->physicalatk(), output);
  }

  // required int32 physicalDef = 19;
  if (has_physicaldef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->physicaldef(), output);
  }

  // required int32 magicAtk = 20;
  if (has_magicatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->magicatk(), output);
  }

  // required int32 magicDef = 21;
  if (has_magicdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->magicdef(), output);
  }

  // required int32 dex = 22;
  if (has_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->dex(), output);
  }

  // required int32 cri = 23;
  if (has_cri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->cri(), output);
  }

  // required int32 block = 24;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->block(), output);
  }

  // required int32 agl = 25;
  if (has_agl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->agl(), output);
  }

  // required int32 fc = 26;
  if (has_fc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->fc(), output);
  }

  // required int32 gold = 27;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->gold(), output);
  }

  // required int32 coins = 28;
  if (has_coins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->coins(), output);
  }

  // required int32 weaponId = 29;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->weaponid(), output);
  }

  // required int32 headId = 30;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->headid(), output);
  }

  // required int32 clothingId = 31;
  if (has_clothingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->clothingid(), output);
  }

  // required int32 useSoulNum = 32;
  if (has_usesoulnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->usesoulnum(), output);
  }

  // required int32 haveSoulNum = 33;
  if (has_havesoulnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->havesoulnum(), output);
  }

  // required int32 useSoul1 = 34;
  if (has_usesoul1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->usesoul1(), output);
  }

  // required int32 useSoul2 = 35;
  if (has_usesoul2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->usesoul2(), output);
  }

  // required int32 vipLevel = 36;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->viplevel(), output);
  }

  // required int32 vipDt = 37;
  if (has_vipdt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->vipdt(), output);
  }

  // required int32 friendNum = 38;
  if (has_friendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->friendnum(), output);
  }

  // required int32 friendMax = 39;
  if (has_friendmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->friendmax(), output);
  }

  // required int32 lastLoginTime = 40;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->lastlogintime(), output);
  }

  // required int32 lastOfflineTime = 41;
  if (has_lastofflinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->lastofflinetime(), output);
  }

  // required int32 dailyRemain = 42;
  if (has_dailyremain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->dailyremain(), output);
  }

  // required int32 dailyComplete = 43;
  if (has_dailycomplete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->dailycomplete(), output);
  }

  // required int32 dailyTotal = 44;
  if (has_dailytotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->dailytotal(), output);
  }

  // required int32 dailyVipRemain = 45;
  if (has_dailyvipremain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->dailyvipremain(), output);
  }

  // required int32 dailyVipComplete = 46;
  if (has_dailyvipcomplete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->dailyvipcomplete(), output);
  }

  // required int32 dailyVipTotal = 47;
  if (has_dailyviptotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->dailyviptotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Roler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 roleId = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roleid(), target);
  }

  // required string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nickname().data(), this->nickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->nickname(), target);
  }

  // required int32 levelMax = 3;
  if (has_levelmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->levelmax(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // required int32 roleIndex = 6;
  if (has_roleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roleindex(), target);
  }

  // required int32 avatarId = 7;
  if (has_avatarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->avatarid(), target);
  }

  // required int32 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->exp(), target);
  }

  // required int32 upgradeExp = 9;
  if (has_upgradeexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->upgradeexp(), target);
  }

  // required int32 achievement = 10;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->achievement(), target);
  }

  // required int32 achievementMax = 11;
  if (has_achievementmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->achievementmax(), target);
  }

  // required string title = 12;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->title(), target);
  }

  // required int32 guildId = 13;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->guildid(), target);
  }

  // required int32 guildPosition = 14;
  if (has_guildposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->guildposition(), target);
  }

  // required int32 hp = 15;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hp(), target);
  }

  // required int32 energy = 16;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->energy(), target);
  }

  // required int32 energyMax = 17;
  if (has_energymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->energymax(), target);
  }

  // required int32 physicalAtk = 18;
  if (has_physicalatk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->physicalatk(), target);
  }

  // required int32 physicalDef = 19;
  if (has_physicaldef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->physicaldef(), target);
  }

  // required int32 magicAtk = 20;
  if (has_magicatk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->magicatk(), target);
  }

  // required int32 magicDef = 21;
  if (has_magicdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->magicdef(), target);
  }

  // required int32 dex = 22;
  if (has_dex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->dex(), target);
  }

  // required int32 cri = 23;
  if (has_cri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->cri(), target);
  }

  // required int32 block = 24;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->block(), target);
  }

  // required int32 agl = 25;
  if (has_agl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->agl(), target);
  }

  // required int32 fc = 26;
  if (has_fc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->fc(), target);
  }

  // required int32 gold = 27;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->gold(), target);
  }

  // required int32 coins = 28;
  if (has_coins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->coins(), target);
  }

  // required int32 weaponId = 29;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->weaponid(), target);
  }

  // required int32 headId = 30;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->headid(), target);
  }

  // required int32 clothingId = 31;
  if (has_clothingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->clothingid(), target);
  }

  // required int32 useSoulNum = 32;
  if (has_usesoulnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->usesoulnum(), target);
  }

  // required int32 haveSoulNum = 33;
  if (has_havesoulnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->havesoulnum(), target);
  }

  // required int32 useSoul1 = 34;
  if (has_usesoul1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->usesoul1(), target);
  }

  // required int32 useSoul2 = 35;
  if (has_usesoul2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->usesoul2(), target);
  }

  // required int32 vipLevel = 36;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->viplevel(), target);
  }

  // required int32 vipDt = 37;
  if (has_vipdt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->vipdt(), target);
  }

  // required int32 friendNum = 38;
  if (has_friendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->friendnum(), target);
  }

  // required int32 friendMax = 39;
  if (has_friendmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->friendmax(), target);
  }

  // required int32 lastLoginTime = 40;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->lastlogintime(), target);
  }

  // required int32 lastOfflineTime = 41;
  if (has_lastofflinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->lastofflinetime(), target);
  }

  // required int32 dailyRemain = 42;
  if (has_dailyremain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->dailyremain(), target);
  }

  // required int32 dailyComplete = 43;
  if (has_dailycomplete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->dailycomplete(), target);
  }

  // required int32 dailyTotal = 44;
  if (has_dailytotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->dailytotal(), target);
  }

  // required int32 dailyVipRemain = 45;
  if (has_dailyvipremain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->dailyvipremain(), target);
  }

  // required int32 dailyVipComplete = 46;
  if (has_dailyvipcomplete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->dailyvipcomplete(), target);
  }

  // required int32 dailyVipTotal = 47;
  if (has_dailyviptotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->dailyviptotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Roler::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 roleId = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleid());
    }

    // required string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

    // required int32 levelMax = 3;
    if (has_levelmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelmax());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 roleIndex = 6;
    if (has_roleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roleindex());
    }

    // required int32 avatarId = 7;
    if (has_avatarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avatarid());
    }

    // required int32 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 upgradeExp = 9;
    if (has_upgradeexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradeexp());
    }

    // required int32 achievement = 10;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievement());
    }

    // required int32 achievementMax = 11;
    if (has_achievementmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementmax());
    }

    // required string title = 12;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required int32 guildId = 13;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildid());
    }

    // required int32 guildPosition = 14;
    if (has_guildposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildposition());
    }

    // required int32 hp = 15;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 energy = 16;
    if (has_energy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 energyMax = 17;
    if (has_energymax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energymax());
    }

    // required int32 physicalAtk = 18;
    if (has_physicalatk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicalatk());
    }

    // required int32 physicalDef = 19;
    if (has_physicaldef()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicaldef());
    }

    // required int32 magicAtk = 20;
    if (has_magicatk()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicatk());
    }

    // required int32 magicDef = 21;
    if (has_magicdef()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdef());
    }

    // required int32 dex = 22;
    if (has_dex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dex());
    }

    // required int32 cri = 23;
    if (has_cri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cri());
    }

    // required int32 block = 24;
    if (has_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 agl = 25;
    if (has_agl()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agl());
    }

    // required int32 fc = 26;
    if (has_fc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fc());
    }

    // required int32 gold = 27;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 coins = 28;
    if (has_coins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coins());
    }

    // required int32 weaponId = 29;
    if (has_weaponid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // required int32 headId = 30;
    if (has_headid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // required int32 clothingId = 31;
    if (has_clothingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clothingid());
    }

    // required int32 useSoulNum = 32;
    if (has_usesoulnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usesoulnum());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 haveSoulNum = 33;
    if (has_havesoulnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->havesoulnum());
    }

    // required int32 useSoul1 = 34;
    if (has_usesoul1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usesoul1());
    }

    // required int32 useSoul2 = 35;
    if (has_usesoul2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usesoul2());
    }

    // required int32 vipLevel = 36;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // required int32 vipDt = 37;
    if (has_vipdt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipdt());
    }

    // required int32 friendNum = 38;
    if (has_friendnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendnum());
    }

    // required int32 friendMax = 39;
    if (has_friendmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->friendmax());
    }

    // required int32 lastLoginTime = 40;
    if (has_lastlogintime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlogintime());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required int32 lastOfflineTime = 41;
    if (has_lastofflinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastofflinetime());
    }

    // required int32 dailyRemain = 42;
    if (has_dailyremain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailyremain());
    }

    // required int32 dailyComplete = 43;
    if (has_dailycomplete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailycomplete());
    }

    // required int32 dailyTotal = 44;
    if (has_dailytotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailytotal());
    }

    // required int32 dailyVipRemain = 45;
    if (has_dailyvipremain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailyvipremain());
    }

    // required int32 dailyVipComplete = 46;
    if (has_dailyvipcomplete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailyvipcomplete());
    }

    // required int32 dailyVipTotal = 47;
    if (has_dailyviptotal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailyviptotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Roler::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Roler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Roler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Roler::MergeFrom(const Roler& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
    if (from.has_levelmax()) {
      set_levelmax(from.levelmax());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_roleindex()) {
      set_roleindex(from.roleindex());
    }
    if (from.has_avatarid()) {
      set_avatarid(from.avatarid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_upgradeexp()) {
      set_upgradeexp(from.upgradeexp());
    }
    if (from.has_achievement()) {
      set_achievement(from.achievement());
    }
    if (from.has_achievementmax()) {
      set_achievementmax(from.achievementmax());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildposition()) {
      set_guildposition(from.guildposition());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_energymax()) {
      set_energymax(from.energymax());
    }
    if (from.has_physicalatk()) {
      set_physicalatk(from.physicalatk());
    }
    if (from.has_physicaldef()) {
      set_physicaldef(from.physicaldef());
    }
    if (from.has_magicatk()) {
      set_magicatk(from.magicatk());
    }
    if (from.has_magicdef()) {
      set_magicdef(from.magicdef());
    }
    if (from.has_dex()) {
      set_dex(from.dex());
    }
    if (from.has_cri()) {
      set_cri(from.cri());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_agl()) {
      set_agl(from.agl());
    }
    if (from.has_fc()) {
      set_fc(from.fc());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_coins()) {
      set_coins(from.coins());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_clothingid()) {
      set_clothingid(from.clothingid());
    }
    if (from.has_usesoulnum()) {
      set_usesoulnum(from.usesoulnum());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_havesoulnum()) {
      set_havesoulnum(from.havesoulnum());
    }
    if (from.has_usesoul1()) {
      set_usesoul1(from.usesoul1());
    }
    if (from.has_usesoul2()) {
      set_usesoul2(from.usesoul2());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_vipdt()) {
      set_vipdt(from.vipdt());
    }
    if (from.has_friendnum()) {
      set_friendnum(from.friendnum());
    }
    if (from.has_friendmax()) {
      set_friendmax(from.friendmax());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_lastofflinetime()) {
      set_lastofflinetime(from.lastofflinetime());
    }
    if (from.has_dailyremain()) {
      set_dailyremain(from.dailyremain());
    }
    if (from.has_dailycomplete()) {
      set_dailycomplete(from.dailycomplete());
    }
    if (from.has_dailytotal()) {
      set_dailytotal(from.dailytotal());
    }
    if (from.has_dailyvipremain()) {
      set_dailyvipremain(from.dailyvipremain());
    }
    if (from.has_dailyvipcomplete()) {
      set_dailyvipcomplete(from.dailyvipcomplete());
    }
    if (from.has_dailyviptotal()) {
      set_dailyviptotal(from.dailyviptotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Roler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roler::CopyFrom(const Roler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roler::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void Roler::Swap(Roler* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(nickname_, other->nickname_);
    std::swap(levelmax_, other->levelmax_);
    std::swap(level_, other->level_);
    std::swap(sex_, other->sex_);
    std::swap(roleindex_, other->roleindex_);
    std::swap(avatarid_, other->avatarid_);
    std::swap(exp_, other->exp_);
    std::swap(upgradeexp_, other->upgradeexp_);
    std::swap(achievement_, other->achievement_);
    std::swap(achievementmax_, other->achievementmax_);
    std::swap(title_, other->title_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildposition_, other->guildposition_);
    std::swap(hp_, other->hp_);
    std::swap(energy_, other->energy_);
    std::swap(energymax_, other->energymax_);
    std::swap(physicalatk_, other->physicalatk_);
    std::swap(physicaldef_, other->physicaldef_);
    std::swap(magicatk_, other->magicatk_);
    std::swap(magicdef_, other->magicdef_);
    std::swap(dex_, other->dex_);
    std::swap(cri_, other->cri_);
    std::swap(block_, other->block_);
    std::swap(agl_, other->agl_);
    std::swap(fc_, other->fc_);
    std::swap(gold_, other->gold_);
    std::swap(coins_, other->coins_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(headid_, other->headid_);
    std::swap(clothingid_, other->clothingid_);
    std::swap(usesoulnum_, other->usesoulnum_);
    std::swap(havesoulnum_, other->havesoulnum_);
    std::swap(usesoul1_, other->usesoul1_);
    std::swap(usesoul2_, other->usesoul2_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(vipdt_, other->vipdt_);
    std::swap(friendnum_, other->friendnum_);
    std::swap(friendmax_, other->friendmax_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(lastofflinetime_, other->lastofflinetime_);
    std::swap(dailyremain_, other->dailyremain_);
    std::swap(dailycomplete_, other->dailycomplete_);
    std::swap(dailytotal_, other->dailytotal_);
    std::swap(dailyvipremain_, other->dailyvipremain_);
    std::swap(dailyvipcomplete_, other->dailyvipcomplete_);
    std::swap(dailyviptotal_, other->dailyviptotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Roler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Roler_descriptor_;
  metadata.reflection = Roler_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleResponse::kResultFieldNumber;
const int RoleResponse::kRolerFieldNumber;
#endif  // !_MSC_VER

RoleResponse::RoleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleResponse::InitAsDefaultInstance() {
  roler_ = const_cast< ::com::tiange::mdsj::proto::Roler*>(&::com::tiange::mdsj::proto::Roler::default_instance());
}

RoleResponse::RoleResponse(const RoleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  roler_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleResponse::~RoleResponse() {
  SharedDtor();
}

void RoleResponse::SharedDtor() {
  if (this != default_instance_) {
    delete roler_;
  }
}

void RoleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleResponse_descriptor_;
}

const RoleResponse& RoleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoleProto_2eproto();
  return *default_instance_;
}

RoleResponse* RoleResponse::default_instance_ = NULL;

RoleResponse* RoleResponse::New() const {
  return new RoleResponse;
}

void RoleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_roler()) {
      if (roler_ != NULL) roler_->::com::tiange::mdsj::proto::Roler::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tiange.mdsj.proto.RoleResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tiange::mdsj::proto::RoleResult_IsValid(value)) {
            set_result(static_cast< ::com::tiange::mdsj::proto::RoleResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roler;
        break;
      }

      // required .com.tiange.mdsj.proto.Roler roler = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roler()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.tiange.mdsj.proto.RoleResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required .com.tiange.mdsj.proto.Roler roler = 2;
  if (has_roler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roler(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.tiange.mdsj.proto.RoleResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required .com.tiange.mdsj.proto.Roler roler = 2;
  if (has_roler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roler(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tiange.mdsj.proto.RoleResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required .com.tiange.mdsj.proto.Roler roler = 2;
    if (has_roler()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roler());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleResponse::MergeFrom(const RoleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_roler()) {
      mutable_roler()->::com::tiange::mdsj::proto::Roler::MergeFrom(from.roler());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleResponse::CopyFrom(const RoleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_roler()) {
    if (!this->roler().IsInitialized()) return false;
  }
  return true;
}

void RoleResponse::Swap(RoleResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(roler_, other->roler_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleResponse_descriptor_;
  metadata.reflection = RoleResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mdsj
}  // namespace tiange
}  // namespace com

// @@protoc_insertion_point(global_scope)
