// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoleProto.proto

#ifndef PROTOBUF_RoleProto_2eproto__INCLUDED
#define PROTOBUF_RoleProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tiange {
namespace mdsj {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RoleProto_2eproto();
void protobuf_AssignDesc_RoleProto_2eproto();
void protobuf_ShutdownFile_RoleProto_2eproto();

class RoleRequest;
class Roler;
class RoleResponse;

enum RoleResult {
  ROLE_SUCCESS = 0,
  ROLE_SERVER_BUSY = 1,
  ROLE_VERSION_LOWER = 2,
  ROLE_NOT_EXSIT = 3,
  ROLE_KEY_INVALID = 4
};
bool RoleResult_IsValid(int value);
const RoleResult RoleResult_MIN = ROLE_SUCCESS;
const RoleResult RoleResult_MAX = ROLE_KEY_INVALID;
const int RoleResult_ARRAYSIZE = RoleResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoleResult_descriptor();
inline const ::std::string& RoleResult_Name(RoleResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    RoleResult_descriptor(), value);
}
inline bool RoleResult_Parse(
    const ::std::string& name, RoleResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoleResult>(
    RoleResult_descriptor(), name, value);
}
// ===================================================================

class RoleRequest : public ::google::protobuf::Message {
 public:
  RoleRequest();
  virtual ~RoleRequest();

  RoleRequest(const RoleRequest& from);

  inline RoleRequest& operator=(const RoleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleRequest& default_instance();

  void Swap(RoleRequest* other);

  // implements Message ----------------------------------------------

  RoleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleRequest& from);
  void MergeFrom(const RoleRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.RoleRequest)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_RoleProto_2eproto();
  friend void protobuf_AssignDesc_RoleProto_2eproto();
  friend void protobuf_ShutdownFile_RoleProto_2eproto();

  void InitAsDefaultInstance();
  static RoleRequest* default_instance_;
};
// -------------------------------------------------------------------

class Roler : public ::google::protobuf::Message {
 public:
  Roler();
  virtual ~Roler();

  Roler(const Roler& from);

  inline Roler& operator=(const Roler& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Roler& default_instance();

  void Swap(Roler* other);

  // implements Message ----------------------------------------------

  Roler* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Roler& from);
  void MergeFrom(const Roler& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 levelMax = 3;
  inline bool has_levelmax() const;
  inline void clear_levelmax();
  static const int kLevelMaxFieldNumber = 3;
  inline ::google::protobuf::int32 levelmax() const;
  inline void set_levelmax(::google::protobuf::int32 value);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required int32 roleIndex = 6;
  inline bool has_roleindex() const;
  inline void clear_roleindex();
  static const int kRoleIndexFieldNumber = 6;
  inline ::google::protobuf::int32 roleindex() const;
  inline void set_roleindex(::google::protobuf::int32 value);

  // required int32 avatarId = 7;
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIdFieldNumber = 7;
  inline ::google::protobuf::int32 avatarid() const;
  inline void set_avatarid(::google::protobuf::int32 value);

  // required int32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // required int32 upgradeExp = 9;
  inline bool has_upgradeexp() const;
  inline void clear_upgradeexp();
  static const int kUpgradeExpFieldNumber = 9;
  inline ::google::protobuf::int32 upgradeexp() const;
  inline void set_upgradeexp(::google::protobuf::int32 value);

  // required int32 achievement = 10;
  inline bool has_achievement() const;
  inline void clear_achievement();
  static const int kAchievementFieldNumber = 10;
  inline ::google::protobuf::int32 achievement() const;
  inline void set_achievement(::google::protobuf::int32 value);

  // required int32 achievementMax = 11;
  inline bool has_achievementmax() const;
  inline void clear_achievementmax();
  static const int kAchievementMaxFieldNumber = 11;
  inline ::google::protobuf::int32 achievementmax() const;
  inline void set_achievementmax(::google::protobuf::int32 value);

  // required string title = 12;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 12;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required int32 guildId = 13;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 13;
  inline ::google::protobuf::int32 guildid() const;
  inline void set_guildid(::google::protobuf::int32 value);

  // required int32 guildPosition = 14;
  inline bool has_guildposition() const;
  inline void clear_guildposition();
  static const int kGuildPositionFieldNumber = 14;
  inline ::google::protobuf::int32 guildposition() const;
  inline void set_guildposition(::google::protobuf::int32 value);

  // required int32 hp = 15;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 15;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 energy = 16;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 16;
  inline ::google::protobuf::int32 energy() const;
  inline void set_energy(::google::protobuf::int32 value);

  // required int32 energyMax = 17;
  inline bool has_energymax() const;
  inline void clear_energymax();
  static const int kEnergyMaxFieldNumber = 17;
  inline ::google::protobuf::int32 energymax() const;
  inline void set_energymax(::google::protobuf::int32 value);

  // required int32 physicalAtk = 18;
  inline bool has_physicalatk() const;
  inline void clear_physicalatk();
  static const int kPhysicalAtkFieldNumber = 18;
  inline ::google::protobuf::int32 physicalatk() const;
  inline void set_physicalatk(::google::protobuf::int32 value);

  // required int32 physicalDef = 19;
  inline bool has_physicaldef() const;
  inline void clear_physicaldef();
  static const int kPhysicalDefFieldNumber = 19;
  inline ::google::protobuf::int32 physicaldef() const;
  inline void set_physicaldef(::google::protobuf::int32 value);

  // required int32 magicAtk = 20;
  inline bool has_magicatk() const;
  inline void clear_magicatk();
  static const int kMagicAtkFieldNumber = 20;
  inline ::google::protobuf::int32 magicatk() const;
  inline void set_magicatk(::google::protobuf::int32 value);

  // required int32 magicDef = 21;
  inline bool has_magicdef() const;
  inline void clear_magicdef();
  static const int kMagicDefFieldNumber = 21;
  inline ::google::protobuf::int32 magicdef() const;
  inline void set_magicdef(::google::protobuf::int32 value);

  // required int32 dex = 22;
  inline bool has_dex() const;
  inline void clear_dex();
  static const int kDexFieldNumber = 22;
  inline ::google::protobuf::int32 dex() const;
  inline void set_dex(::google::protobuf::int32 value);

  // required int32 cri = 23;
  inline bool has_cri() const;
  inline void clear_cri();
  static const int kCriFieldNumber = 23;
  inline ::google::protobuf::int32 cri() const;
  inline void set_cri(::google::protobuf::int32 value);

  // required int32 block = 24;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 24;
  inline ::google::protobuf::int32 block() const;
  inline void set_block(::google::protobuf::int32 value);

  // required int32 agl = 25;
  inline bool has_agl() const;
  inline void clear_agl();
  static const int kAglFieldNumber = 25;
  inline ::google::protobuf::int32 agl() const;
  inline void set_agl(::google::protobuf::int32 value);

  // required int32 fc = 26;
  inline bool has_fc() const;
  inline void clear_fc();
  static const int kFcFieldNumber = 26;
  inline ::google::protobuf::int32 fc() const;
  inline void set_fc(::google::protobuf::int32 value);

  // required int32 gold = 27;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 27;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // required int32 coins = 28;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 28;
  inline ::google::protobuf::int32 coins() const;
  inline void set_coins(::google::protobuf::int32 value);

  // required int32 weaponId = 29;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIdFieldNumber = 29;
  inline ::google::protobuf::int32 weaponid() const;
  inline void set_weaponid(::google::protobuf::int32 value);

  // required int32 headId = 30;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIdFieldNumber = 30;
  inline ::google::protobuf::int32 headid() const;
  inline void set_headid(::google::protobuf::int32 value);

  // required int32 clothingId = 31;
  inline bool has_clothingid() const;
  inline void clear_clothingid();
  static const int kClothingIdFieldNumber = 31;
  inline ::google::protobuf::int32 clothingid() const;
  inline void set_clothingid(::google::protobuf::int32 value);

  // required int32 useSoulNum = 32;
  inline bool has_usesoulnum() const;
  inline void clear_usesoulnum();
  static const int kUseSoulNumFieldNumber = 32;
  inline ::google::protobuf::int32 usesoulnum() const;
  inline void set_usesoulnum(::google::protobuf::int32 value);

  // required int32 haveSoulNum = 33;
  inline bool has_havesoulnum() const;
  inline void clear_havesoulnum();
  static const int kHaveSoulNumFieldNumber = 33;
  inline ::google::protobuf::int32 havesoulnum() const;
  inline void set_havesoulnum(::google::protobuf::int32 value);

  // required int32 useSoul1 = 34;
  inline bool has_usesoul1() const;
  inline void clear_usesoul1();
  static const int kUseSoul1FieldNumber = 34;
  inline ::google::protobuf::int32 usesoul1() const;
  inline void set_usesoul1(::google::protobuf::int32 value);

  // required int32 useSoul2 = 35;
  inline bool has_usesoul2() const;
  inline void clear_usesoul2();
  static const int kUseSoul2FieldNumber = 35;
  inline ::google::protobuf::int32 usesoul2() const;
  inline void set_usesoul2(::google::protobuf::int32 value);

  // required int32 vipLevel = 36;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 36;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // required int32 vipDt = 37;
  inline bool has_vipdt() const;
  inline void clear_vipdt();
  static const int kVipDtFieldNumber = 37;
  inline ::google::protobuf::int32 vipdt() const;
  inline void set_vipdt(::google::protobuf::int32 value);

  // required int32 friendNum = 38;
  inline bool has_friendnum() const;
  inline void clear_friendnum();
  static const int kFriendNumFieldNumber = 38;
  inline ::google::protobuf::int32 friendnum() const;
  inline void set_friendnum(::google::protobuf::int32 value);

  // required int32 friendMax = 39;
  inline bool has_friendmax() const;
  inline void clear_friendmax();
  static const int kFriendMaxFieldNumber = 39;
  inline ::google::protobuf::int32 friendmax() const;
  inline void set_friendmax(::google::protobuf::int32 value);

  // required int32 lastLoginTime = 40;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 40;
  inline ::google::protobuf::int32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int32 value);

  // required int32 lastOfflineTime = 41;
  inline bool has_lastofflinetime() const;
  inline void clear_lastofflinetime();
  static const int kLastOfflineTimeFieldNumber = 41;
  inline ::google::protobuf::int32 lastofflinetime() const;
  inline void set_lastofflinetime(::google::protobuf::int32 value);

  // required int32 dailyRemain = 42;
  inline bool has_dailyremain() const;
  inline void clear_dailyremain();
  static const int kDailyRemainFieldNumber = 42;
  inline ::google::protobuf::int32 dailyremain() const;
  inline void set_dailyremain(::google::protobuf::int32 value);

  // required int32 dailyComplete = 43;
  inline bool has_dailycomplete() const;
  inline void clear_dailycomplete();
  static const int kDailyCompleteFieldNumber = 43;
  inline ::google::protobuf::int32 dailycomplete() const;
  inline void set_dailycomplete(::google::protobuf::int32 value);

  // required int32 dailyTotal = 44;
  inline bool has_dailytotal() const;
  inline void clear_dailytotal();
  static const int kDailyTotalFieldNumber = 44;
  inline ::google::protobuf::int32 dailytotal() const;
  inline void set_dailytotal(::google::protobuf::int32 value);

  // required int32 dailyVipRemain = 45;
  inline bool has_dailyvipremain() const;
  inline void clear_dailyvipremain();
  static const int kDailyVipRemainFieldNumber = 45;
  inline ::google::protobuf::int32 dailyvipremain() const;
  inline void set_dailyvipremain(::google::protobuf::int32 value);

  // required int32 dailyVipComplete = 46;
  inline bool has_dailyvipcomplete() const;
  inline void clear_dailyvipcomplete();
  static const int kDailyVipCompleteFieldNumber = 46;
  inline ::google::protobuf::int32 dailyvipcomplete() const;
  inline void set_dailyvipcomplete(::google::protobuf::int32 value);

  // required int32 dailyVipTotal = 47;
  inline bool has_dailyviptotal() const;
  inline void clear_dailyviptotal();
  static const int kDailyVipTotalFieldNumber = 47;
  inline ::google::protobuf::int32 dailyviptotal() const;
  inline void set_dailyviptotal(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.Roler)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_levelmax();
  inline void clear_has_levelmax();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_roleindex();
  inline void clear_has_roleindex();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_upgradeexp();
  inline void clear_has_upgradeexp();
  inline void set_has_achievement();
  inline void clear_has_achievement();
  inline void set_has_achievementmax();
  inline void clear_has_achievementmax();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildposition();
  inline void clear_has_guildposition();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_energymax();
  inline void clear_has_energymax();
  inline void set_has_physicalatk();
  inline void clear_has_physicalatk();
  inline void set_has_physicaldef();
  inline void clear_has_physicaldef();
  inline void set_has_magicatk();
  inline void clear_has_magicatk();
  inline void set_has_magicdef();
  inline void clear_has_magicdef();
  inline void set_has_dex();
  inline void clear_has_dex();
  inline void set_has_cri();
  inline void clear_has_cri();
  inline void set_has_block();
  inline void clear_has_block();
  inline void set_has_agl();
  inline void clear_has_agl();
  inline void set_has_fc();
  inline void clear_has_fc();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_coins();
  inline void clear_has_coins();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_clothingid();
  inline void clear_has_clothingid();
  inline void set_has_usesoulnum();
  inline void clear_has_usesoulnum();
  inline void set_has_havesoulnum();
  inline void clear_has_havesoulnum();
  inline void set_has_usesoul1();
  inline void clear_has_usesoul1();
  inline void set_has_usesoul2();
  inline void clear_has_usesoul2();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_vipdt();
  inline void clear_has_vipdt();
  inline void set_has_friendnum();
  inline void clear_has_friendnum();
  inline void set_has_friendmax();
  inline void clear_has_friendmax();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_lastofflinetime();
  inline void clear_has_lastofflinetime();
  inline void set_has_dailyremain();
  inline void clear_has_dailyremain();
  inline void set_has_dailycomplete();
  inline void clear_has_dailycomplete();
  inline void set_has_dailytotal();
  inline void clear_has_dailytotal();
  inline void set_has_dailyvipremain();
  inline void clear_has_dailyvipremain();
  inline void set_has_dailyvipcomplete();
  inline void clear_has_dailyvipcomplete();
  inline void set_has_dailyviptotal();
  inline void clear_has_dailyviptotal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 levelmax_;
  ::std::string* nickname_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 roleindex_;
  ::google::protobuf::int32 avatarid_;
  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 upgradeexp_;
  ::google::protobuf::int32 achievement_;
  ::google::protobuf::int32 achievementmax_;
  ::std::string* title_;
  ::google::protobuf::int32 guildid_;
  ::google::protobuf::int32 guildposition_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 energymax_;
  ::google::protobuf::int32 physicalatk_;
  ::google::protobuf::int32 physicaldef_;
  ::google::protobuf::int32 magicatk_;
  ::google::protobuf::int32 magicdef_;
  ::google::protobuf::int32 dex_;
  ::google::protobuf::int32 cri_;
  ::google::protobuf::int32 block_;
  ::google::protobuf::int32 agl_;
  ::google::protobuf::int32 fc_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 coins_;
  ::google::protobuf::int32 weaponid_;
  ::google::protobuf::int32 headid_;
  ::google::protobuf::int32 clothingid_;
  ::google::protobuf::int32 usesoulnum_;
  ::google::protobuf::int32 havesoulnum_;
  ::google::protobuf::int32 usesoul1_;
  ::google::protobuf::int32 usesoul2_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 vipdt_;
  ::google::protobuf::int32 friendnum_;
  ::google::protobuf::int32 friendmax_;
  ::google::protobuf::int32 lastlogintime_;
  ::google::protobuf::int32 lastofflinetime_;
  ::google::protobuf::int32 dailyremain_;
  ::google::protobuf::int32 dailycomplete_;
  ::google::protobuf::int32 dailytotal_;
  ::google::protobuf::int32 dailyvipremain_;
  ::google::protobuf::int32 dailyvipcomplete_;
  ::google::protobuf::int32 dailyviptotal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(47 + 31) / 32];

  friend void  protobuf_AddDesc_RoleProto_2eproto();
  friend void protobuf_AssignDesc_RoleProto_2eproto();
  friend void protobuf_ShutdownFile_RoleProto_2eproto();

  void InitAsDefaultInstance();
  static Roler* default_instance_;
};
// -------------------------------------------------------------------

class RoleResponse : public ::google::protobuf::Message {
 public:
  RoleResponse();
  virtual ~RoleResponse();

  RoleResponse(const RoleResponse& from);

  inline RoleResponse& operator=(const RoleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleResponse& default_instance();

  void Swap(RoleResponse* other);

  // implements Message ----------------------------------------------

  RoleResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleResponse& from);
  void MergeFrom(const RoleResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.tiange.mdsj.proto.RoleResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::tiange::mdsj::proto::RoleResult result() const;
  inline void set_result(::com::tiange::mdsj::proto::RoleResult value);

  // required .com.tiange.mdsj.proto.Roler roler = 2;
  inline bool has_roler() const;
  inline void clear_roler();
  static const int kRolerFieldNumber = 2;
  inline const ::com::tiange::mdsj::proto::Roler& roler() const;
  inline ::com::tiange::mdsj::proto::Roler* mutable_roler();
  inline ::com::tiange::mdsj::proto::Roler* release_roler();
  inline void set_allocated_roler(::com::tiange::mdsj::proto::Roler* roler);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.RoleResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roler();
  inline void clear_has_roler();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::com::tiange::mdsj::proto::Roler* roler_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_RoleProto_2eproto();
  friend void protobuf_AssignDesc_RoleProto_2eproto();
  friend void protobuf_ShutdownFile_RoleProto_2eproto();

  void InitAsDefaultInstance();
  static RoleResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// RoleRequest

// required int32 roleId = 1;
inline bool RoleRequest::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleRequest::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleRequest::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleRequest::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 RoleRequest::roleid() const {
  return roleid_;
}
inline void RoleRequest::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// -------------------------------------------------------------------

// Roler

// required int32 roleId = 1;
inline bool Roler::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Roler::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Roler::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Roler::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 Roler::roleid() const {
  return roleid_;
}
inline void Roler::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string nickname = 2;
inline bool Roler::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Roler::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Roler::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Roler::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& Roler::nickname() const {
  return *nickname_;
}
inline void Roler::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Roler::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void Roler::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Roler::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* Roler::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Roler::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 levelMax = 3;
inline bool Roler::has_levelmax() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Roler::set_has_levelmax() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Roler::clear_has_levelmax() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Roler::clear_levelmax() {
  levelmax_ = 0;
  clear_has_levelmax();
}
inline ::google::protobuf::int32 Roler::levelmax() const {
  return levelmax_;
}
inline void Roler::set_levelmax(::google::protobuf::int32 value) {
  set_has_levelmax();
  levelmax_ = value;
}

// required int32 level = 4;
inline bool Roler::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Roler::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Roler::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Roler::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Roler::level() const {
  return level_;
}
inline void Roler::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 sex = 5;
inline bool Roler::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Roler::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Roler::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Roler::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 Roler::sex() const {
  return sex_;
}
inline void Roler::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// required int32 roleIndex = 6;
inline bool Roler::has_roleindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Roler::set_has_roleindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Roler::clear_has_roleindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Roler::clear_roleindex() {
  roleindex_ = 0;
  clear_has_roleindex();
}
inline ::google::protobuf::int32 Roler::roleindex() const {
  return roleindex_;
}
inline void Roler::set_roleindex(::google::protobuf::int32 value) {
  set_has_roleindex();
  roleindex_ = value;
}

// required int32 avatarId = 7;
inline bool Roler::has_avatarid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Roler::set_has_avatarid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Roler::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Roler::clear_avatarid() {
  avatarid_ = 0;
  clear_has_avatarid();
}
inline ::google::protobuf::int32 Roler::avatarid() const {
  return avatarid_;
}
inline void Roler::set_avatarid(::google::protobuf::int32 value) {
  set_has_avatarid();
  avatarid_ = value;
}

// required int32 exp = 8;
inline bool Roler::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Roler::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Roler::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Roler::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 Roler::exp() const {
  return exp_;
}
inline void Roler::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// required int32 upgradeExp = 9;
inline bool Roler::has_upgradeexp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Roler::set_has_upgradeexp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Roler::clear_has_upgradeexp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Roler::clear_upgradeexp() {
  upgradeexp_ = 0;
  clear_has_upgradeexp();
}
inline ::google::protobuf::int32 Roler::upgradeexp() const {
  return upgradeexp_;
}
inline void Roler::set_upgradeexp(::google::protobuf::int32 value) {
  set_has_upgradeexp();
  upgradeexp_ = value;
}

// required int32 achievement = 10;
inline bool Roler::has_achievement() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Roler::set_has_achievement() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Roler::clear_has_achievement() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Roler::clear_achievement() {
  achievement_ = 0;
  clear_has_achievement();
}
inline ::google::protobuf::int32 Roler::achievement() const {
  return achievement_;
}
inline void Roler::set_achievement(::google::protobuf::int32 value) {
  set_has_achievement();
  achievement_ = value;
}

// required int32 achievementMax = 11;
inline bool Roler::has_achievementmax() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Roler::set_has_achievementmax() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Roler::clear_has_achievementmax() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Roler::clear_achievementmax() {
  achievementmax_ = 0;
  clear_has_achievementmax();
}
inline ::google::protobuf::int32 Roler::achievementmax() const {
  return achievementmax_;
}
inline void Roler::set_achievementmax(::google::protobuf::int32 value) {
  set_has_achievementmax();
  achievementmax_ = value;
}

// required string title = 12;
inline bool Roler::has_title() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Roler::set_has_title() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Roler::clear_has_title() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Roler::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Roler::title() const {
  return *title_;
}
inline void Roler::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Roler::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Roler::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Roler::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Roler::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Roler::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 guildId = 13;
inline bool Roler::has_guildid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Roler::set_has_guildid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Roler::clear_has_guildid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Roler::clear_guildid() {
  guildid_ = 0;
  clear_has_guildid();
}
inline ::google::protobuf::int32 Roler::guildid() const {
  return guildid_;
}
inline void Roler::set_guildid(::google::protobuf::int32 value) {
  set_has_guildid();
  guildid_ = value;
}

// required int32 guildPosition = 14;
inline bool Roler::has_guildposition() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Roler::set_has_guildposition() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Roler::clear_has_guildposition() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Roler::clear_guildposition() {
  guildposition_ = 0;
  clear_has_guildposition();
}
inline ::google::protobuf::int32 Roler::guildposition() const {
  return guildposition_;
}
inline void Roler::set_guildposition(::google::protobuf::int32 value) {
  set_has_guildposition();
  guildposition_ = value;
}

// required int32 hp = 15;
inline bool Roler::has_hp() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Roler::set_has_hp() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Roler::clear_has_hp() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Roler::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 Roler::hp() const {
  return hp_;
}
inline void Roler::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 energy = 16;
inline bool Roler::has_energy() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Roler::set_has_energy() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Roler::clear_has_energy() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Roler::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 Roler::energy() const {
  return energy_;
}
inline void Roler::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
}

// required int32 energyMax = 17;
inline bool Roler::has_energymax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Roler::set_has_energymax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Roler::clear_has_energymax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Roler::clear_energymax() {
  energymax_ = 0;
  clear_has_energymax();
}
inline ::google::protobuf::int32 Roler::energymax() const {
  return energymax_;
}
inline void Roler::set_energymax(::google::protobuf::int32 value) {
  set_has_energymax();
  energymax_ = value;
}

// required int32 physicalAtk = 18;
inline bool Roler::has_physicalatk() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Roler::set_has_physicalatk() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Roler::clear_has_physicalatk() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Roler::clear_physicalatk() {
  physicalatk_ = 0;
  clear_has_physicalatk();
}
inline ::google::protobuf::int32 Roler::physicalatk() const {
  return physicalatk_;
}
inline void Roler::set_physicalatk(::google::protobuf::int32 value) {
  set_has_physicalatk();
  physicalatk_ = value;
}

// required int32 physicalDef = 19;
inline bool Roler::has_physicaldef() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Roler::set_has_physicaldef() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Roler::clear_has_physicaldef() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Roler::clear_physicaldef() {
  physicaldef_ = 0;
  clear_has_physicaldef();
}
inline ::google::protobuf::int32 Roler::physicaldef() const {
  return physicaldef_;
}
inline void Roler::set_physicaldef(::google::protobuf::int32 value) {
  set_has_physicaldef();
  physicaldef_ = value;
}

// required int32 magicAtk = 20;
inline bool Roler::has_magicatk() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Roler::set_has_magicatk() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Roler::clear_has_magicatk() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Roler::clear_magicatk() {
  magicatk_ = 0;
  clear_has_magicatk();
}
inline ::google::protobuf::int32 Roler::magicatk() const {
  return magicatk_;
}
inline void Roler::set_magicatk(::google::protobuf::int32 value) {
  set_has_magicatk();
  magicatk_ = value;
}

// required int32 magicDef = 21;
inline bool Roler::has_magicdef() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Roler::set_has_magicdef() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Roler::clear_has_magicdef() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Roler::clear_magicdef() {
  magicdef_ = 0;
  clear_has_magicdef();
}
inline ::google::protobuf::int32 Roler::magicdef() const {
  return magicdef_;
}
inline void Roler::set_magicdef(::google::protobuf::int32 value) {
  set_has_magicdef();
  magicdef_ = value;
}

// required int32 dex = 22;
inline bool Roler::has_dex() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Roler::set_has_dex() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Roler::clear_has_dex() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Roler::clear_dex() {
  dex_ = 0;
  clear_has_dex();
}
inline ::google::protobuf::int32 Roler::dex() const {
  return dex_;
}
inline void Roler::set_dex(::google::protobuf::int32 value) {
  set_has_dex();
  dex_ = value;
}

// required int32 cri = 23;
inline bool Roler::has_cri() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Roler::set_has_cri() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Roler::clear_has_cri() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Roler::clear_cri() {
  cri_ = 0;
  clear_has_cri();
}
inline ::google::protobuf::int32 Roler::cri() const {
  return cri_;
}
inline void Roler::set_cri(::google::protobuf::int32 value) {
  set_has_cri();
  cri_ = value;
}

// required int32 block = 24;
inline bool Roler::has_block() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Roler::set_has_block() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Roler::clear_has_block() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Roler::clear_block() {
  block_ = 0;
  clear_has_block();
}
inline ::google::protobuf::int32 Roler::block() const {
  return block_;
}
inline void Roler::set_block(::google::protobuf::int32 value) {
  set_has_block();
  block_ = value;
}

// required int32 agl = 25;
inline bool Roler::has_agl() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Roler::set_has_agl() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Roler::clear_has_agl() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Roler::clear_agl() {
  agl_ = 0;
  clear_has_agl();
}
inline ::google::protobuf::int32 Roler::agl() const {
  return agl_;
}
inline void Roler::set_agl(::google::protobuf::int32 value) {
  set_has_agl();
  agl_ = value;
}

// required int32 fc = 26;
inline bool Roler::has_fc() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Roler::set_has_fc() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Roler::clear_has_fc() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Roler::clear_fc() {
  fc_ = 0;
  clear_has_fc();
}
inline ::google::protobuf::int32 Roler::fc() const {
  return fc_;
}
inline void Roler::set_fc(::google::protobuf::int32 value) {
  set_has_fc();
  fc_ = value;
}

// required int32 gold = 27;
inline bool Roler::has_gold() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Roler::set_has_gold() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Roler::clear_has_gold() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Roler::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 Roler::gold() const {
  return gold_;
}
inline void Roler::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// required int32 coins = 28;
inline bool Roler::has_coins() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Roler::set_has_coins() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Roler::clear_has_coins() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Roler::clear_coins() {
  coins_ = 0;
  clear_has_coins();
}
inline ::google::protobuf::int32 Roler::coins() const {
  return coins_;
}
inline void Roler::set_coins(::google::protobuf::int32 value) {
  set_has_coins();
  coins_ = value;
}

// required int32 weaponId = 29;
inline bool Roler::has_weaponid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Roler::set_has_weaponid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Roler::clear_has_weaponid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Roler::clear_weaponid() {
  weaponid_ = 0;
  clear_has_weaponid();
}
inline ::google::protobuf::int32 Roler::weaponid() const {
  return weaponid_;
}
inline void Roler::set_weaponid(::google::protobuf::int32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// required int32 headId = 30;
inline bool Roler::has_headid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Roler::set_has_headid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Roler::clear_has_headid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Roler::clear_headid() {
  headid_ = 0;
  clear_has_headid();
}
inline ::google::protobuf::int32 Roler::headid() const {
  return headid_;
}
inline void Roler::set_headid(::google::protobuf::int32 value) {
  set_has_headid();
  headid_ = value;
}

// required int32 clothingId = 31;
inline bool Roler::has_clothingid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Roler::set_has_clothingid() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Roler::clear_has_clothingid() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Roler::clear_clothingid() {
  clothingid_ = 0;
  clear_has_clothingid();
}
inline ::google::protobuf::int32 Roler::clothingid() const {
  return clothingid_;
}
inline void Roler::set_clothingid(::google::protobuf::int32 value) {
  set_has_clothingid();
  clothingid_ = value;
}

// required int32 useSoulNum = 32;
inline bool Roler::has_usesoulnum() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Roler::set_has_usesoulnum() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Roler::clear_has_usesoulnum() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Roler::clear_usesoulnum() {
  usesoulnum_ = 0;
  clear_has_usesoulnum();
}
inline ::google::protobuf::int32 Roler::usesoulnum() const {
  return usesoulnum_;
}
inline void Roler::set_usesoulnum(::google::protobuf::int32 value) {
  set_has_usesoulnum();
  usesoulnum_ = value;
}

// required int32 haveSoulNum = 33;
inline bool Roler::has_havesoulnum() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Roler::set_has_havesoulnum() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Roler::clear_has_havesoulnum() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Roler::clear_havesoulnum() {
  havesoulnum_ = 0;
  clear_has_havesoulnum();
}
inline ::google::protobuf::int32 Roler::havesoulnum() const {
  return havesoulnum_;
}
inline void Roler::set_havesoulnum(::google::protobuf::int32 value) {
  set_has_havesoulnum();
  havesoulnum_ = value;
}

// required int32 useSoul1 = 34;
inline bool Roler::has_usesoul1() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Roler::set_has_usesoul1() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Roler::clear_has_usesoul1() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Roler::clear_usesoul1() {
  usesoul1_ = 0;
  clear_has_usesoul1();
}
inline ::google::protobuf::int32 Roler::usesoul1() const {
  return usesoul1_;
}
inline void Roler::set_usesoul1(::google::protobuf::int32 value) {
  set_has_usesoul1();
  usesoul1_ = value;
}

// required int32 useSoul2 = 35;
inline bool Roler::has_usesoul2() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Roler::set_has_usesoul2() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Roler::clear_has_usesoul2() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Roler::clear_usesoul2() {
  usesoul2_ = 0;
  clear_has_usesoul2();
}
inline ::google::protobuf::int32 Roler::usesoul2() const {
  return usesoul2_;
}
inline void Roler::set_usesoul2(::google::protobuf::int32 value) {
  set_has_usesoul2();
  usesoul2_ = value;
}

// required int32 vipLevel = 36;
inline bool Roler::has_viplevel() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Roler::set_has_viplevel() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Roler::clear_has_viplevel() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Roler::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 Roler::viplevel() const {
  return viplevel_;
}
inline void Roler::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// required int32 vipDt = 37;
inline bool Roler::has_vipdt() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Roler::set_has_vipdt() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Roler::clear_has_vipdt() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Roler::clear_vipdt() {
  vipdt_ = 0;
  clear_has_vipdt();
}
inline ::google::protobuf::int32 Roler::vipdt() const {
  return vipdt_;
}
inline void Roler::set_vipdt(::google::protobuf::int32 value) {
  set_has_vipdt();
  vipdt_ = value;
}

// required int32 friendNum = 38;
inline bool Roler::has_friendnum() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Roler::set_has_friendnum() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Roler::clear_has_friendnum() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Roler::clear_friendnum() {
  friendnum_ = 0;
  clear_has_friendnum();
}
inline ::google::protobuf::int32 Roler::friendnum() const {
  return friendnum_;
}
inline void Roler::set_friendnum(::google::protobuf::int32 value) {
  set_has_friendnum();
  friendnum_ = value;
}

// required int32 friendMax = 39;
inline bool Roler::has_friendmax() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Roler::set_has_friendmax() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Roler::clear_has_friendmax() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Roler::clear_friendmax() {
  friendmax_ = 0;
  clear_has_friendmax();
}
inline ::google::protobuf::int32 Roler::friendmax() const {
  return friendmax_;
}
inline void Roler::set_friendmax(::google::protobuf::int32 value) {
  set_has_friendmax();
  friendmax_ = value;
}

// required int32 lastLoginTime = 40;
inline bool Roler::has_lastlogintime() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Roler::set_has_lastlogintime() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Roler::clear_has_lastlogintime() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Roler::clear_lastlogintime() {
  lastlogintime_ = 0;
  clear_has_lastlogintime();
}
inline ::google::protobuf::int32 Roler::lastlogintime() const {
  return lastlogintime_;
}
inline void Roler::set_lastlogintime(::google::protobuf::int32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// required int32 lastOfflineTime = 41;
inline bool Roler::has_lastofflinetime() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Roler::set_has_lastofflinetime() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Roler::clear_has_lastofflinetime() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Roler::clear_lastofflinetime() {
  lastofflinetime_ = 0;
  clear_has_lastofflinetime();
}
inline ::google::protobuf::int32 Roler::lastofflinetime() const {
  return lastofflinetime_;
}
inline void Roler::set_lastofflinetime(::google::protobuf::int32 value) {
  set_has_lastofflinetime();
  lastofflinetime_ = value;
}

// required int32 dailyRemain = 42;
inline bool Roler::has_dailyremain() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Roler::set_has_dailyremain() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Roler::clear_has_dailyremain() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Roler::clear_dailyremain() {
  dailyremain_ = 0;
  clear_has_dailyremain();
}
inline ::google::protobuf::int32 Roler::dailyremain() const {
  return dailyremain_;
}
inline void Roler::set_dailyremain(::google::protobuf::int32 value) {
  set_has_dailyremain();
  dailyremain_ = value;
}

// required int32 dailyComplete = 43;
inline bool Roler::has_dailycomplete() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Roler::set_has_dailycomplete() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Roler::clear_has_dailycomplete() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Roler::clear_dailycomplete() {
  dailycomplete_ = 0;
  clear_has_dailycomplete();
}
inline ::google::protobuf::int32 Roler::dailycomplete() const {
  return dailycomplete_;
}
inline void Roler::set_dailycomplete(::google::protobuf::int32 value) {
  set_has_dailycomplete();
  dailycomplete_ = value;
}

// required int32 dailyTotal = 44;
inline bool Roler::has_dailytotal() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Roler::set_has_dailytotal() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Roler::clear_has_dailytotal() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Roler::clear_dailytotal() {
  dailytotal_ = 0;
  clear_has_dailytotal();
}
inline ::google::protobuf::int32 Roler::dailytotal() const {
  return dailytotal_;
}
inline void Roler::set_dailytotal(::google::protobuf::int32 value) {
  set_has_dailytotal();
  dailytotal_ = value;
}

// required int32 dailyVipRemain = 45;
inline bool Roler::has_dailyvipremain() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Roler::set_has_dailyvipremain() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Roler::clear_has_dailyvipremain() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Roler::clear_dailyvipremain() {
  dailyvipremain_ = 0;
  clear_has_dailyvipremain();
}
inline ::google::protobuf::int32 Roler::dailyvipremain() const {
  return dailyvipremain_;
}
inline void Roler::set_dailyvipremain(::google::protobuf::int32 value) {
  set_has_dailyvipremain();
  dailyvipremain_ = value;
}

// required int32 dailyVipComplete = 46;
inline bool Roler::has_dailyvipcomplete() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Roler::set_has_dailyvipcomplete() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Roler::clear_has_dailyvipcomplete() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Roler::clear_dailyvipcomplete() {
  dailyvipcomplete_ = 0;
  clear_has_dailyvipcomplete();
}
inline ::google::protobuf::int32 Roler::dailyvipcomplete() const {
  return dailyvipcomplete_;
}
inline void Roler::set_dailyvipcomplete(::google::protobuf::int32 value) {
  set_has_dailyvipcomplete();
  dailyvipcomplete_ = value;
}

// required int32 dailyVipTotal = 47;
inline bool Roler::has_dailyviptotal() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Roler::set_has_dailyviptotal() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Roler::clear_has_dailyviptotal() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Roler::clear_dailyviptotal() {
  dailyviptotal_ = 0;
  clear_has_dailyviptotal();
}
inline ::google::protobuf::int32 Roler::dailyviptotal() const {
  return dailyviptotal_;
}
inline void Roler::set_dailyviptotal(::google::protobuf::int32 value) {
  set_has_dailyviptotal();
  dailyviptotal_ = value;
}

// -------------------------------------------------------------------

// RoleResponse

// required .com.tiange.mdsj.proto.RoleResult result = 1;
inline bool RoleResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::com::tiange::mdsj::proto::RoleResult RoleResponse::result() const {
  return static_cast< ::com::tiange::mdsj::proto::RoleResult >(result_);
}
inline void RoleResponse::set_result(::com::tiange::mdsj::proto::RoleResult value) {
  assert(::com::tiange::mdsj::proto::RoleResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// required .com.tiange.mdsj.proto.Roler roler = 2;
inline bool RoleResponse::has_roler() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleResponse::set_has_roler() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleResponse::clear_has_roler() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleResponse::clear_roler() {
  if (roler_ != NULL) roler_->::com::tiange::mdsj::proto::Roler::Clear();
  clear_has_roler();
}
inline const ::com::tiange::mdsj::proto::Roler& RoleResponse::roler() const {
  return roler_ != NULL ? *roler_ : *default_instance_->roler_;
}
inline ::com::tiange::mdsj::proto::Roler* RoleResponse::mutable_roler() {
  set_has_roler();
  if (roler_ == NULL) roler_ = new ::com::tiange::mdsj::proto::Roler;
  return roler_;
}
inline ::com::tiange::mdsj::proto::Roler* RoleResponse::release_roler() {
  clear_has_roler();
  ::com::tiange::mdsj::proto::Roler* temp = roler_;
  roler_ = NULL;
  return temp;
}
inline void RoleResponse::set_allocated_roler(::com::tiange::mdsj::proto::Roler* roler) {
  delete roler_;
  roler_ = roler;
  if (roler) {
    set_has_roler();
  } else {
    clear_has_roler();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mdsj
}  // namespace tiange
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::tiange::mdsj::proto::RoleResult>() {
  return ::com::tiange::mdsj::proto::RoleResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RoleProto_2eproto__INCLUDED
