// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LandProto.proto

#ifndef PROTOBUF_LandProto_2eproto__INCLUDED
#define PROTOBUF_LandProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tiange {
namespace mdsj {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LandProto_2eproto();
void protobuf_AssignDesc_LandProto_2eproto();
void protobuf_ShutdownFile_LandProto_2eproto();

class LoginRequest;
class Player;
class LoginResponse;
class RoleListRequest;
class RoleLogin;
class RoleListResponse;
class CreateRoleRequest;
class CreateRoleResponse;
class DeleteRoleRequest;
class DeleteRoleResponse;

enum LandResult {
  SUCCESS = 0,
  SERVER_BUSY = 1,
  VERSION_LOWER = 2,
  USER_NOT_EXSIT = 3,
  KEY_INVALID = 4
};
bool LandResult_IsValid(int value);
const LandResult LandResult_MIN = SUCCESS;
const LandResult LandResult_MAX = KEY_INVALID;
const int LandResult_ARRAYSIZE = LandResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* LandResult_descriptor();
inline const ::std::string& LandResult_Name(LandResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    LandResult_descriptor(), value);
}
inline bool LandResult_Parse(
    const ::std::string& name, LandResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LandResult>(
    LandResult_descriptor(), name, value);
}
// ===================================================================

class LoginRequest : public ::google::protobuf::Message {
 public:
  LoginRequest();
  virtual ~LoginRequest();

  LoginRequest(const LoginRequest& from);

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRequest& default_instance();

  void Swap(LoginRequest* other);

  // implements Message ----------------------------------------------

  LoginRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.LoginRequest)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* key_;
  ::std::string* version_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static LoginRequest* default_instance_;
};
// -------------------------------------------------------------------

class Player : public ::google::protobuf::Message {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Player& default_instance();

  void Swap(Player* other);

  // implements Message ----------------------------------------------

  Player* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required int32 region = 2;
  inline bool has_region() const;
  inline void clear_region();
  static const int kRegionFieldNumber = 2;
  inline ::google::protobuf::int32 region() const;
  inline void set_region(::google::protobuf::int32 value);

  // required bool enable = 3;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 3;
  inline bool enable() const;
  inline void set_enable(bool value);

  // required int32 role1 = 4;
  inline bool has_role1() const;
  inline void clear_role1();
  static const int kRole1FieldNumber = 4;
  inline ::google::protobuf::int32 role1() const;
  inline void set_role1(::google::protobuf::int32 value);

  // required int32 role2 = 5;
  inline bool has_role2() const;
  inline void clear_role2();
  static const int kRole2FieldNumber = 5;
  inline ::google::protobuf::int32 role2() const;
  inline void set_role2(::google::protobuf::int32 value);

  // required int32 role3 = 6;
  inline bool has_role3() const;
  inline void clear_role3();
  static const int kRole3FieldNumber = 6;
  inline ::google::protobuf::int32 role3() const;
  inline void set_role3(::google::protobuf::int32 value);

  // required int32 role4 = 7;
  inline bool has_role4() const;
  inline void clear_role4();
  static const int kRole4FieldNumber = 7;
  inline ::google::protobuf::int32 role4() const;
  inline void set_role4(::google::protobuf::int32 value);

  // required int32 lastLoginTime = 8;
  inline bool has_lastlogintime() const;
  inline void clear_lastlogintime();
  static const int kLastLoginTimeFieldNumber = 8;
  inline ::google::protobuf::int32 lastlogintime() const;
  inline void set_lastlogintime(::google::protobuf::int32 value);

  // required int32 lastOfflineTime = 9;
  inline bool has_lastofflinetime() const;
  inline void clear_lastofflinetime();
  static const int kLastOfflineTimeFieldNumber = 9;
  inline ::google::protobuf::int32 lastofflinetime() const;
  inline void set_lastofflinetime(::google::protobuf::int32 value);

  // required int32 loginTime = 10;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 10;
  inline ::google::protobuf::int32 logintime() const;
  inline void set_logintime(::google::protobuf::int32 value);

  // required int32 playId = 11;
  inline bool has_playid() const;
  inline void clear_playid();
  static const int kPlayIdFieldNumber = 11;
  inline ::google::protobuf::int32 playid() const;
  inline void set_playid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.Player)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_region();
  inline void clear_has_region();
  inline void set_has_enable();
  inline void clear_has_enable();
  inline void set_has_role1();
  inline void clear_has_role1();
  inline void set_has_role2();
  inline void clear_has_role2();
  inline void set_has_role3();
  inline void clear_has_role3();
  inline void set_has_role4();
  inline void clear_has_role4();
  inline void set_has_lastlogintime();
  inline void clear_has_lastlogintime();
  inline void set_has_lastofflinetime();
  inline void clear_has_lastofflinetime();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_playid();
  inline void clear_has_playid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::int32 region_;
  bool enable_;
  ::google::protobuf::int32 role1_;
  ::google::protobuf::int32 role2_;
  ::google::protobuf::int32 role3_;
  ::google::protobuf::int32 role4_;
  ::google::protobuf::int32 lastlogintime_;
  ::google::protobuf::int32 lastofflinetime_;
  ::google::protobuf::int32 logintime_;
  ::google::protobuf::int32 playid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static Player* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.tiange.mdsj.proto.LandResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::tiange::mdsj::proto::LandResult result() const;
  inline void set_result(::com::tiange::mdsj::proto::LandResult value);

  // required string version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // required .com.tiange.mdsj.proto.Player player = 3;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 3;
  inline const ::com::tiange::mdsj::proto::Player& player() const;
  inline ::com::tiange::mdsj::proto::Player* mutable_player();
  inline ::com::tiange::mdsj::proto::Player* release_player();
  inline void set_allocated_player(::com::tiange::mdsj::proto::Player* player);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.LoginResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_player();
  inline void clear_has_player();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* version_;
  ::com::tiange::mdsj::proto::Player* player_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class RoleListRequest : public ::google::protobuf::Message {
 public:
  RoleListRequest();
  virtual ~RoleListRequest();

  RoleListRequest(const RoleListRequest& from);

  inline RoleListRequest& operator=(const RoleListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleListRequest& default_instance();

  void Swap(RoleListRequest* other);

  // implements Message ----------------------------------------------

  RoleListRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleListRequest& from);
  void MergeFrom(const RoleListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playId = 1;
  inline bool has_playid() const;
  inline void clear_playid();
  static const int kPlayIdFieldNumber = 1;
  inline ::google::protobuf::int32 playid() const;
  inline void set_playid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.RoleListRequest)
 private:
  inline void set_has_playid();
  inline void clear_has_playid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static RoleListRequest* default_instance_;
};
// -------------------------------------------------------------------

class RoleLogin : public ::google::protobuf::Message {
 public:
  RoleLogin();
  virtual ~RoleLogin();

  RoleLogin(const RoleLogin& from);

  inline RoleLogin& operator=(const RoleLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleLogin& default_instance();

  void Swap(RoleLogin* other);

  // implements Message ----------------------------------------------

  RoleLogin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleLogin& from);
  void MergeFrom(const RoleLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 avatarId = 4;
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIdFieldNumber = 4;
  inline ::google::protobuf::int32 avatarid() const;
  inline void set_avatarid(::google::protobuf::int32 value);

  // required int32 roleIndex = 5;
  inline bool has_roleindex() const;
  inline void clear_roleindex();
  static const int kRoleIndexFieldNumber = 5;
  inline ::google::protobuf::int32 roleindex() const;
  inline void set_roleindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.RoleLogin)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();
  inline void set_has_roleindex();
  inline void clear_has_roleindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 avatarid_;
  ::google::protobuf::int32 roleindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static RoleLogin* default_instance_;
};
// -------------------------------------------------------------------

class RoleListResponse : public ::google::protobuf::Message {
 public:
  RoleListResponse();
  virtual ~RoleListResponse();

  RoleListResponse(const RoleListResponse& from);

  inline RoleListResponse& operator=(const RoleListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleListResponse& default_instance();

  void Swap(RoleListResponse* other);

  // implements Message ----------------------------------------------

  RoleListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleListResponse& from);
  void MergeFrom(const RoleListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.tiange.mdsj.proto.LandResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::tiange::mdsj::proto::LandResult result() const;
  inline void set_result(::com::tiange::mdsj::proto::LandResult value);

  // repeated .com.tiange.mdsj.proto.RoleLogin roleLogin = 2;
  inline int rolelogin_size() const;
  inline void clear_rolelogin();
  static const int kRoleLoginFieldNumber = 2;
  inline const ::com::tiange::mdsj::proto::RoleLogin& rolelogin(int index) const;
  inline ::com::tiange::mdsj::proto::RoleLogin* mutable_rolelogin(int index);
  inline ::com::tiange::mdsj::proto::RoleLogin* add_rolelogin();
  inline const ::google::protobuf::RepeatedPtrField< ::com::tiange::mdsj::proto::RoleLogin >&
      rolelogin() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::tiange::mdsj::proto::RoleLogin >*
      mutable_rolelogin();

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.RoleListResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::com::tiange::mdsj::proto::RoleLogin > rolelogin_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static RoleListResponse* default_instance_;
};
// -------------------------------------------------------------------

class CreateRoleRequest : public ::google::protobuf::Message {
 public:
  CreateRoleRequest();
  virtual ~CreateRoleRequest();

  CreateRoleRequest(const CreateRoleRequest& from);

  inline CreateRoleRequest& operator=(const CreateRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoleRequest& default_instance();

  void Swap(CreateRoleRequest* other);

  // implements Message ----------------------------------------------

  CreateRoleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRoleRequest& from);
  void MergeFrom(const CreateRoleRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string nickname = 1;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 1;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 roleIndex = 2;
  inline bool has_roleindex() const;
  inline void clear_roleindex();
  static const int kRoleIndexFieldNumber = 2;
  inline ::google::protobuf::int32 roleindex() const;
  inline void set_roleindex(::google::protobuf::int32 value);

  // required int32 avatarId = 3;
  inline bool has_avatarid() const;
  inline void clear_avatarid();
  static const int kAvatarIdFieldNumber = 3;
  inline ::google::protobuf::int32 avatarid() const;
  inline void set_avatarid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.CreateRoleRequest)
 private:
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_roleindex();
  inline void clear_has_roleindex();
  inline void set_has_avatarid();
  inline void clear_has_avatarid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nickname_;
  ::google::protobuf::int32 roleindex_;
  ::google::protobuf::int32 avatarid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static CreateRoleRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateRoleResponse : public ::google::protobuf::Message {
 public:
  CreateRoleResponse();
  virtual ~CreateRoleResponse();

  CreateRoleResponse(const CreateRoleResponse& from);

  inline CreateRoleResponse& operator=(const CreateRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoleResponse& default_instance();

  void Swap(CreateRoleResponse* other);

  // implements Message ----------------------------------------------

  CreateRoleResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRoleResponse& from);
  void MergeFrom(const CreateRoleResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.tiange.mdsj.proto.LandResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::tiange::mdsj::proto::LandResult result() const;
  inline void set_result(::com::tiange::mdsj::proto::LandResult value);

  // required int32 roleId = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required string nickname = 3;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.CreateRoleResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::int32 roleid_;
  ::std::string* nickname_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static CreateRoleResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRoleRequest : public ::google::protobuf::Message {
 public:
  DeleteRoleRequest();
  virtual ~DeleteRoleRequest();

  DeleteRoleRequest(const DeleteRoleRequest& from);

  inline DeleteRoleRequest& operator=(const DeleteRoleRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRoleRequest& default_instance();

  void Swap(DeleteRoleRequest* other);

  // implements Message ----------------------------------------------

  DeleteRoleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRoleRequest& from);
  void MergeFrom(const DeleteRoleRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 roleId = 1;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // required int32 roleIndex = 2;
  inline bool has_roleindex() const;
  inline void clear_roleindex();
  static const int kRoleIndexFieldNumber = 2;
  inline ::google::protobuf::int32 roleindex() const;
  inline void set_roleindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.DeleteRoleRequest)
 private:
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_roleindex();
  inline void clear_has_roleindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 roleid_;
  ::google::protobuf::int32 roleindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static DeleteRoleRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRoleResponse : public ::google::protobuf::Message {
 public:
  DeleteRoleResponse();
  virtual ~DeleteRoleResponse();

  DeleteRoleResponse(const DeleteRoleResponse& from);

  inline DeleteRoleResponse& operator=(const DeleteRoleResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRoleResponse& default_instance();

  void Swap(DeleteRoleResponse* other);

  // implements Message ----------------------------------------------

  DeleteRoleResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRoleResponse& from);
  void MergeFrom(const DeleteRoleResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.tiange.mdsj.proto.LandResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::com::tiange::mdsj::proto::LandResult result() const;
  inline void set_result(::com::tiange::mdsj::proto::LandResult value);

  // required int32 roleId = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleIdFieldNumber = 2;
  inline ::google::protobuf::int32 roleid() const;
  inline void set_roleid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.tiange.mdsj.proto.DeleteRoleResponse)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_roleid();
  inline void clear_has_roleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::int32 roleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_LandProto_2eproto();
  friend void protobuf_AssignDesc_LandProto_2eproto();
  friend void protobuf_ShutdownFile_LandProto_2eproto();

  void InitAsDefaultInstance();
  static DeleteRoleResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginRequest

// required string user = 1;
inline bool LoginRequest::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRequest::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRequest::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRequest::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& LoginRequest::user() const {
  return *user_;
}
inline void LoginRequest::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void LoginRequest::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void LoginRequest::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* LoginRequest::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string key = 2;
inline bool LoginRequest::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRequest::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRequest::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& LoginRequest::key() const {
  return *key_;
}
inline void LoginRequest::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LoginRequest::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void LoginRequest::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* LoginRequest::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string version = 3;
inline bool LoginRequest::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginRequest::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginRequest::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginRequest::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& LoginRequest::version() const {
  return *version_;
}
inline void LoginRequest::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void LoginRequest::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void LoginRequest::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginRequest::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* LoginRequest::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginRequest::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Player

// required string user = 1;
inline bool Player::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Player::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Player::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Player::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& Player::user() const {
  return *user_;
}
inline void Player::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Player::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void Player::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Player::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* Player::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Player::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 region = 2;
inline bool Player::has_region() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Player::set_has_region() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Player::clear_has_region() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Player::clear_region() {
  region_ = 0;
  clear_has_region();
}
inline ::google::protobuf::int32 Player::region() const {
  return region_;
}
inline void Player::set_region(::google::protobuf::int32 value) {
  set_has_region();
  region_ = value;
}

// required bool enable = 3;
inline bool Player::has_enable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Player::set_has_enable() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Player::clear_has_enable() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Player::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool Player::enable() const {
  return enable_;
}
inline void Player::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
}

// required int32 role1 = 4;
inline bool Player::has_role1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Player::set_has_role1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Player::clear_has_role1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Player::clear_role1() {
  role1_ = 0;
  clear_has_role1();
}
inline ::google::protobuf::int32 Player::role1() const {
  return role1_;
}
inline void Player::set_role1(::google::protobuf::int32 value) {
  set_has_role1();
  role1_ = value;
}

// required int32 role2 = 5;
inline bool Player::has_role2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Player::set_has_role2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Player::clear_has_role2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Player::clear_role2() {
  role2_ = 0;
  clear_has_role2();
}
inline ::google::protobuf::int32 Player::role2() const {
  return role2_;
}
inline void Player::set_role2(::google::protobuf::int32 value) {
  set_has_role2();
  role2_ = value;
}

// required int32 role3 = 6;
inline bool Player::has_role3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Player::set_has_role3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Player::clear_has_role3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Player::clear_role3() {
  role3_ = 0;
  clear_has_role3();
}
inline ::google::protobuf::int32 Player::role3() const {
  return role3_;
}
inline void Player::set_role3(::google::protobuf::int32 value) {
  set_has_role3();
  role3_ = value;
}

// required int32 role4 = 7;
inline bool Player::has_role4() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Player::set_has_role4() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Player::clear_has_role4() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Player::clear_role4() {
  role4_ = 0;
  clear_has_role4();
}
inline ::google::protobuf::int32 Player::role4() const {
  return role4_;
}
inline void Player::set_role4(::google::protobuf::int32 value) {
  set_has_role4();
  role4_ = value;
}

// required int32 lastLoginTime = 8;
inline bool Player::has_lastlogintime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Player::set_has_lastlogintime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Player::clear_has_lastlogintime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Player::clear_lastlogintime() {
  lastlogintime_ = 0;
  clear_has_lastlogintime();
}
inline ::google::protobuf::int32 Player::lastlogintime() const {
  return lastlogintime_;
}
inline void Player::set_lastlogintime(::google::protobuf::int32 value) {
  set_has_lastlogintime();
  lastlogintime_ = value;
}

// required int32 lastOfflineTime = 9;
inline bool Player::has_lastofflinetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Player::set_has_lastofflinetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Player::clear_has_lastofflinetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Player::clear_lastofflinetime() {
  lastofflinetime_ = 0;
  clear_has_lastofflinetime();
}
inline ::google::protobuf::int32 Player::lastofflinetime() const {
  return lastofflinetime_;
}
inline void Player::set_lastofflinetime(::google::protobuf::int32 value) {
  set_has_lastofflinetime();
  lastofflinetime_ = value;
}

// required int32 loginTime = 10;
inline bool Player::has_logintime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Player::set_has_logintime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Player::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Player::clear_logintime() {
  logintime_ = 0;
  clear_has_logintime();
}
inline ::google::protobuf::int32 Player::logintime() const {
  return logintime_;
}
inline void Player::set_logintime(::google::protobuf::int32 value) {
  set_has_logintime();
  logintime_ = value;
}

// required int32 playId = 11;
inline bool Player::has_playid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Player::set_has_playid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Player::clear_has_playid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Player::clear_playid() {
  playid_ = 0;
  clear_has_playid();
}
inline ::google::protobuf::int32 Player::playid() const {
  return playid_;
}
inline void Player::set_playid(::google::protobuf::int32 value) {
  set_has_playid();
  playid_ = value;
}

// -------------------------------------------------------------------

// LoginResponse

// required .com.tiange.mdsj.proto.LandResult result = 1;
inline bool LoginResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::com::tiange::mdsj::proto::LandResult LoginResponse::result() const {
  return static_cast< ::com::tiange::mdsj::proto::LandResult >(result_);
}
inline void LoginResponse::set_result(::com::tiange::mdsj::proto::LandResult value) {
  assert(::com::tiange::mdsj::proto::LandResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// required string version = 2;
inline bool LoginResponse::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& LoginResponse::version() const {
  return *version_;
}
inline void LoginResponse::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void LoginResponse::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void LoginResponse::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResponse::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* LoginResponse::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginResponse::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .com.tiange.mdsj.proto.Player player = 3;
inline bool LoginResponse::has_player() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResponse::set_has_player() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResponse::clear_has_player() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResponse::clear_player() {
  if (player_ != NULL) player_->::com::tiange::mdsj::proto::Player::Clear();
  clear_has_player();
}
inline const ::com::tiange::mdsj::proto::Player& LoginResponse::player() const {
  return player_ != NULL ? *player_ : *default_instance_->player_;
}
inline ::com::tiange::mdsj::proto::Player* LoginResponse::mutable_player() {
  set_has_player();
  if (player_ == NULL) player_ = new ::com::tiange::mdsj::proto::Player;
  return player_;
}
inline ::com::tiange::mdsj::proto::Player* LoginResponse::release_player() {
  clear_has_player();
  ::com::tiange::mdsj::proto::Player* temp = player_;
  player_ = NULL;
  return temp;
}
inline void LoginResponse::set_allocated_player(::com::tiange::mdsj::proto::Player* player) {
  delete player_;
  player_ = player;
  if (player) {
    set_has_player();
  } else {
    clear_has_player();
  }
}

// -------------------------------------------------------------------

// RoleListRequest

// required int32 playId = 1;
inline bool RoleListRequest::has_playid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleListRequest::set_has_playid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleListRequest::clear_has_playid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleListRequest::clear_playid() {
  playid_ = 0;
  clear_has_playid();
}
inline ::google::protobuf::int32 RoleListRequest::playid() const {
  return playid_;
}
inline void RoleListRequest::set_playid(::google::protobuf::int32 value) {
  set_has_playid();
  playid_ = value;
}

// -------------------------------------------------------------------

// RoleLogin

// required int32 roleId = 1;
inline bool RoleLogin::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleLogin::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleLogin::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleLogin::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 RoleLogin::roleid() const {
  return roleid_;
}
inline void RoleLogin::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string nickname = 2;
inline bool RoleLogin::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleLogin::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleLogin::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleLogin::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& RoleLogin::nickname() const {
  return *nickname_;
}
inline void RoleLogin::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RoleLogin::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void RoleLogin::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleLogin::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* RoleLogin::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleLogin::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 3;
inline bool RoleLogin::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleLogin::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleLogin::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleLogin::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 RoleLogin::level() const {
  return level_;
}
inline void RoleLogin::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 avatarId = 4;
inline bool RoleLogin::has_avatarid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleLogin::set_has_avatarid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleLogin::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleLogin::clear_avatarid() {
  avatarid_ = 0;
  clear_has_avatarid();
}
inline ::google::protobuf::int32 RoleLogin::avatarid() const {
  return avatarid_;
}
inline void RoleLogin::set_avatarid(::google::protobuf::int32 value) {
  set_has_avatarid();
  avatarid_ = value;
}

// required int32 roleIndex = 5;
inline bool RoleLogin::has_roleindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleLogin::set_has_roleindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleLogin::clear_has_roleindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleLogin::clear_roleindex() {
  roleindex_ = 0;
  clear_has_roleindex();
}
inline ::google::protobuf::int32 RoleLogin::roleindex() const {
  return roleindex_;
}
inline void RoleLogin::set_roleindex(::google::protobuf::int32 value) {
  set_has_roleindex();
  roleindex_ = value;
}

// -------------------------------------------------------------------

// RoleListResponse

// required .com.tiange.mdsj.proto.LandResult result = 1;
inline bool RoleListResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleListResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleListResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleListResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::com::tiange::mdsj::proto::LandResult RoleListResponse::result() const {
  return static_cast< ::com::tiange::mdsj::proto::LandResult >(result_);
}
inline void RoleListResponse::set_result(::com::tiange::mdsj::proto::LandResult value) {
  assert(::com::tiange::mdsj::proto::LandResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .com.tiange.mdsj.proto.RoleLogin roleLogin = 2;
inline int RoleListResponse::rolelogin_size() const {
  return rolelogin_.size();
}
inline void RoleListResponse::clear_rolelogin() {
  rolelogin_.Clear();
}
inline const ::com::tiange::mdsj::proto::RoleLogin& RoleListResponse::rolelogin(int index) const {
  return rolelogin_.Get(index);
}
inline ::com::tiange::mdsj::proto::RoleLogin* RoleListResponse::mutable_rolelogin(int index) {
  return rolelogin_.Mutable(index);
}
inline ::com::tiange::mdsj::proto::RoleLogin* RoleListResponse::add_rolelogin() {
  return rolelogin_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::tiange::mdsj::proto::RoleLogin >&
RoleListResponse::rolelogin() const {
  return rolelogin_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::tiange::mdsj::proto::RoleLogin >*
RoleListResponse::mutable_rolelogin() {
  return &rolelogin_;
}

// -------------------------------------------------------------------

// CreateRoleRequest

// required string nickname = 1;
inline bool CreateRoleRequest::has_nickname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoleRequest::set_has_nickname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRoleRequest::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRoleRequest::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CreateRoleRequest::nickname() const {
  return *nickname_;
}
inline void CreateRoleRequest::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CreateRoleRequest::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CreateRoleRequest::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateRoleRequest::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CreateRoleRequest::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateRoleRequest::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 roleIndex = 2;
inline bool CreateRoleRequest::has_roleindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoleRequest::set_has_roleindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRoleRequest::clear_has_roleindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRoleRequest::clear_roleindex() {
  roleindex_ = 0;
  clear_has_roleindex();
}
inline ::google::protobuf::int32 CreateRoleRequest::roleindex() const {
  return roleindex_;
}
inline void CreateRoleRequest::set_roleindex(::google::protobuf::int32 value) {
  set_has_roleindex();
  roleindex_ = value;
}

// required int32 avatarId = 3;
inline bool CreateRoleRequest::has_avatarid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRoleRequest::set_has_avatarid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRoleRequest::clear_has_avatarid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRoleRequest::clear_avatarid() {
  avatarid_ = 0;
  clear_has_avatarid();
}
inline ::google::protobuf::int32 CreateRoleRequest::avatarid() const {
  return avatarid_;
}
inline void CreateRoleRequest::set_avatarid(::google::protobuf::int32 value) {
  set_has_avatarid();
  avatarid_ = value;
}

// -------------------------------------------------------------------

// CreateRoleResponse

// required .com.tiange.mdsj.proto.LandResult result = 1;
inline bool CreateRoleResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoleResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRoleResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRoleResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::com::tiange::mdsj::proto::LandResult CreateRoleResponse::result() const {
  return static_cast< ::com::tiange::mdsj::proto::LandResult >(result_);
}
inline void CreateRoleResponse::set_result(::com::tiange::mdsj::proto::LandResult value) {
  assert(::com::tiange::mdsj::proto::LandResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// required int32 roleId = 2;
inline bool CreateRoleResponse::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoleResponse::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRoleResponse::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRoleResponse::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 CreateRoleResponse::roleid() const {
  return roleid_;
}
inline void CreateRoleResponse::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required string nickname = 3;
inline bool CreateRoleResponse::has_nickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRoleResponse::set_has_nickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRoleResponse::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRoleResponse::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& CreateRoleResponse::nickname() const {
  return *nickname_;
}
inline void CreateRoleResponse::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CreateRoleResponse::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void CreateRoleResponse::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateRoleResponse::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* CreateRoleResponse::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateRoleResponse::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 4;
inline bool CreateRoleResponse::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateRoleResponse::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateRoleResponse::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateRoleResponse::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CreateRoleResponse::level() const {
  return level_;
}
inline void CreateRoleResponse::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// DeleteRoleRequest

// required int32 roleId = 1;
inline bool DeleteRoleRequest::has_roleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteRoleRequest::set_has_roleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteRoleRequest::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteRoleRequest::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 DeleteRoleRequest::roleid() const {
  return roleid_;
}
inline void DeleteRoleRequest::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}

// required int32 roleIndex = 2;
inline bool DeleteRoleRequest::has_roleindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteRoleRequest::set_has_roleindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteRoleRequest::clear_has_roleindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteRoleRequest::clear_roleindex() {
  roleindex_ = 0;
  clear_has_roleindex();
}
inline ::google::protobuf::int32 DeleteRoleRequest::roleindex() const {
  return roleindex_;
}
inline void DeleteRoleRequest::set_roleindex(::google::protobuf::int32 value) {
  set_has_roleindex();
  roleindex_ = value;
}

// -------------------------------------------------------------------

// DeleteRoleResponse

// required .com.tiange.mdsj.proto.LandResult result = 1;
inline bool DeleteRoleResponse::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteRoleResponse::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteRoleResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteRoleResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::com::tiange::mdsj::proto::LandResult DeleteRoleResponse::result() const {
  return static_cast< ::com::tiange::mdsj::proto::LandResult >(result_);
}
inline void DeleteRoleResponse::set_result(::com::tiange::mdsj::proto::LandResult value) {
  assert(::com::tiange::mdsj::proto::LandResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// required int32 roleId = 2;
inline bool DeleteRoleResponse::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteRoleResponse::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteRoleResponse::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteRoleResponse::clear_roleid() {
  roleid_ = 0;
  clear_has_roleid();
}
inline ::google::protobuf::int32 DeleteRoleResponse::roleid() const {
  return roleid_;
}
inline void DeleteRoleResponse::set_roleid(::google::protobuf::int32 value) {
  set_has_roleid();
  roleid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mdsj
}  // namespace tiange
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::tiange::mdsj::proto::LandResult>() {
  return ::com::tiange::mdsj::proto::LandResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LandProto_2eproto__INCLUDED
