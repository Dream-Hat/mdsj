// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShopProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ShopProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tiange {
namespace mdsj {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ShopListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemDetailRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemDetailRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemDetailResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemDetailResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ShopResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ShopProto_2eproto() {
  protobuf_AddDesc_ShopProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ShopProto.proto");
  GOOGLE_CHECK(file != NULL);
  ShopListRequest_descriptor_ = file->message_type(0);
  static const int ShopListRequest_offsets_[1] = {
  };
  ShopListRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopListRequest_descriptor_,
      ShopListRequest::default_instance_,
      ShopListRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopListRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopListRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopListRequest));
  Shop_descriptor_ = file->message_type(1);
  static const int Shop_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, statisticaltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, usetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, selltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, sellquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, pricegold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, pricecoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, timeon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, timeoff_),
  };
  Shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Shop_descriptor_,
      Shop::default_instance_,
      Shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Shop));
  ShopListResponse_descriptor_ = file->message_type(2);
  static const int ShopListResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopListResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopListResponse, shop_),
  };
  ShopListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopListResponse_descriptor_,
      ShopListResponse::default_instance_,
      ShopListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopListResponse));
  ItemDetailRequest_descriptor_ = file->message_type(3);
  static const int ItemDetailRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDetailRequest, itemid_),
  };
  ItemDetailRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemDetailRequest_descriptor_,
      ItemDetailRequest::default_instance_,
      ItemDetailRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDetailRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDetailRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemDetailRequest));
  Item_descriptor_ = file->message_type(4);
  static const int Item_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, added_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, type1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, type2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, cp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, atk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, dex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, cri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, agl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, strenglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, inlaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, statisticaltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, usetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, overlay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, disappears_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, selltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, sellquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, pricegold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, pricecoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, timeon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, timeoff_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  ItemDetailResponse_descriptor_ = file->message_type(5);
  static const int ItemDetailResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDetailResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDetailResponse, item_),
  };
  ItemDetailResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemDetailResponse_descriptor_,
      ItemDetailResponse::default_instance_,
      ItemDetailResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDetailResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemDetailResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemDetailResponse));
  ShopResult_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ShopProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopListRequest_descriptor_, &ShopListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Shop_descriptor_, &Shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopListResponse_descriptor_, &ShopListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemDetailRequest_descriptor_, &ItemDetailRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemDetailResponse_descriptor_, &ItemDetailResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ShopProto_2eproto() {
  delete ShopListRequest::default_instance_;
  delete ShopListRequest_reflection_;
  delete Shop::default_instance_;
  delete Shop_reflection_;
  delete ShopListResponse::default_instance_;
  delete ShopListResponse_reflection_;
  delete ItemDetailRequest::default_instance_;
  delete ItemDetailRequest_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete ItemDetailResponse::default_instance_;
  delete ItemDetailResponse_reflection_;
}

void protobuf_AddDesc_ShopProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ShopProto.proto\022\025com.tiange.mdsj.proto"
    "\"\021\n\017ShopListRequest\"\337\001\n\004Shop\022\016\n\006shopId\030\001"
    " \002(\005\022\016\n\006itemId\030\002 \002(\005\022\013\n\003sex\030\003 \002(\005\022\027\n\017sta"
    "tisticalType\030\004 \002(\005\022\017\n\007useType\030\005 \002(\005\022\020\n\010s"
    "ellType\030\006 \002(\005\022\024\n\014sellQuantity\030\007 \002(\005\022\021\n\tp"
    "riceGold\030\010 \002(\005\022\022\n\npriceCoins\030\t \002(\005\022\020\n\010di"
    "scount\030\n \002(\005\022\016\n\006timeOn\030\013 \002(\005\022\017\n\007timeOff\030"
    "\014 \002(\005\"p\n\020ShopListResponse\0221\n\006result\030\001 \002("
    "\0162!.com.tiange.mdsj.proto.ShopResult\022)\n\004"
    "shop\030\002 \003(\0132\033.com.tiange.mdsj.proto.Shop\""
    "#\n\021ItemDetailRequest\022\016\n\006itemId\030\001 \002(\005\"\354\003\n"
    "\004Item\022\r\n\005added\030\001 \002(\005\022\016\n\006itemId\030\002 \002(\005\022\014\n\004"
    "name\030\003 \002(\t\022\014\n\004desc\030\004 \002(\t\022\r\n\005type1\030\005 \002(\005\022"
    "\r\n\005type2\030\006 \002(\005\022\017\n\007quality\030\007 \002(\005\022\n\n\002hp\030\010 "
    "\002(\005\022\n\n\002cp\030\t \002(\005\022\013\n\003atk\030\n \002(\005\022\013\n\003def\030\013 \002("
    "\005\022\013\n\003dex\030\014 \002(\005\022\013\n\003cri\030\r \002(\005\022\r\n\005block\030\016 \002"
    "(\005\022\013\n\003agl\030\017 \002(\005\022\023\n\013strengLevel\030\020 \002(\005\022\020\n\010"
    "inlayNum\030\021 \002(\005\022\020\n\010discount\030\022 \002(\005\022\013\n\003sex\030"
    "\023 \002(\005\022\027\n\017statisticalType\030\024 \002(\005\022\017\n\007useTyp"
    "e\030\025 \002(\005\022\017\n\007overlay\030\026 \002(\005\022\r\n\005valid\030\027 \002(\005\022"
    "\022\n\ndisappears\030\030 \002(\005\022\020\n\010sellType\030\031 \002(\005\022\024\n"
    "\014sellQuantity\030\032 \002(\005\022\021\n\tpriceGold\030\033 \002(\005\022\022"
    "\n\npriceCoins\030\034 \002(\005\022\016\n\006timeOn\030\035 \002(\005\022\017\n\007ti"
    "meOff\030\036 \002(\005\"r\n\022ItemDetailResponse\0221\n\006res"
    "ult\030\001 \002(\0162!.com.tiange.mdsj.proto.ShopRe"
    "sult\022)\n\004item\030\002 \002(\0132\033.com.tiange.mdsj.pro"
    "to.Item*J\n\nShopResult\022\020\n\014SHOP_SUCCESS\020\000\022"
    "\024\n\020SHOP_SERVER_BUSY\020\001\022\024\n\020SHOP_KEY_INVALI"
    "D\020\002", 1123);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ShopProto.proto", &protobuf_RegisterTypes);
  ShopListRequest::default_instance_ = new ShopListRequest();
  Shop::default_instance_ = new Shop();
  ShopListResponse::default_instance_ = new ShopListResponse();
  ItemDetailRequest::default_instance_ = new ItemDetailRequest();
  Item::default_instance_ = new Item();
  ItemDetailResponse::default_instance_ = new ItemDetailResponse();
  ShopListRequest::default_instance_->InitAsDefaultInstance();
  Shop::default_instance_->InitAsDefaultInstance();
  ShopListResponse::default_instance_->InitAsDefaultInstance();
  ItemDetailRequest::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  ItemDetailResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ShopProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ShopProto_2eproto {
  StaticDescriptorInitializer_ShopProto_2eproto() {
    protobuf_AddDesc_ShopProto_2eproto();
  }
} static_descriptor_initializer_ShopProto_2eproto_;
const ::google::protobuf::EnumDescriptor* ShopResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopResult_descriptor_;
}
bool ShopResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ShopListRequest::ShopListRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopListRequest::InitAsDefaultInstance() {
}

ShopListRequest::ShopListRequest(const ShopListRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopListRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopListRequest::~ShopListRequest() {
  SharedDtor();
}

void ShopListRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopListRequest_descriptor_;
}

const ShopListRequest& ShopListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopProto_2eproto();
  return *default_instance_;
}

ShopListRequest* ShopListRequest::default_instance_ = NULL;

ShopListRequest* ShopListRequest::New() const {
  return new ShopListRequest;
}

void ShopListRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ShopListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopListRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopListRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopListRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopListRequest::MergeFrom(const ShopListRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopListRequest::CopyFrom(const ShopListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopListRequest::IsInitialized() const {

  return true;
}

void ShopListRequest::Swap(ShopListRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopListRequest_descriptor_;
  metadata.reflection = ShopListRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Shop::kShopIdFieldNumber;
const int Shop::kItemIdFieldNumber;
const int Shop::kSexFieldNumber;
const int Shop::kStatisticalTypeFieldNumber;
const int Shop::kUseTypeFieldNumber;
const int Shop::kSellTypeFieldNumber;
const int Shop::kSellQuantityFieldNumber;
const int Shop::kPriceGoldFieldNumber;
const int Shop::kPriceCoinsFieldNumber;
const int Shop::kDiscountFieldNumber;
const int Shop::kTimeOnFieldNumber;
const int Shop::kTimeOffFieldNumber;
#endif  // !_MSC_VER

Shop::Shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Shop::InitAsDefaultInstance() {
}

Shop::Shop(const Shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Shop::SharedCtor() {
  _cached_size_ = 0;
  shopid_ = 0;
  itemid_ = 0;
  sex_ = 0;
  statisticaltype_ = 0;
  usetype_ = 0;
  selltype_ = 0;
  sellquantity_ = 0;
  pricegold_ = 0;
  pricecoins_ = 0;
  discount_ = 0;
  timeon_ = 0;
  timeoff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Shop::~Shop() {
  SharedDtor();
}

void Shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Shop_descriptor_;
}

const Shop& Shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopProto_2eproto();
  return *default_instance_;
}

Shop* Shop::default_instance_ = NULL;

Shop* Shop::New() const {
  return new Shop;
}

void Shop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shopid_ = 0;
    itemid_ = 0;
    sex_ = 0;
    statisticaltype_ = 0;
    usetype_ = 0;
    selltype_ = 0;
    sellquantity_ = 0;
    pricegold_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pricecoins_ = 0;
    discount_ = 0;
    timeon_ = 0;
    timeoff_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 shopId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sex;
        break;
      }

      // required int32 sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_statisticalType;
        break;
      }

      // required int32 statisticalType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statisticalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statisticaltype_)));
          set_has_statisticaltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_useType;
        break;
      }

      // required int32 useType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usetype_)));
          set_has_usetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sellType;
        break;
      }

      // required int32 sellType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selltype_)));
          set_has_selltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sellQuantity;
        break;
      }

      // required int32 sellQuantity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellquantity_)));
          set_has_sellquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_priceGold;
        break;
      }

      // required int32 priceGold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricegold_)));
          set_has_pricegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_priceCoins;
        break;
      }

      // required int32 priceCoins = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricecoins_)));
          set_has_pricecoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_discount;
        break;
      }

      // required int32 discount = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_timeOn;
        break;
      }

      // required int32 timeOn = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeon_)));
          set_has_timeon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_timeOff;
        break;
      }

      // required int32 timeOff = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeoff_)));
          set_has_timeoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 shopId = 1;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shopid(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required int32 sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sex(), output);
  }

  // required int32 statisticalType = 4;
  if (has_statisticaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->statisticaltype(), output);
  }

  // required int32 useType = 5;
  if (has_usetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usetype(), output);
  }

  // required int32 sellType = 6;
  if (has_selltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->selltype(), output);
  }

  // required int32 sellQuantity = 7;
  if (has_sellquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sellquantity(), output);
  }

  // required int32 priceGold = 8;
  if (has_pricegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pricegold(), output);
  }

  // required int32 priceCoins = 9;
  if (has_pricecoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pricecoins(), output);
  }

  // required int32 discount = 10;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->discount(), output);
  }

  // required int32 timeOn = 11;
  if (has_timeon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->timeon(), output);
  }

  // required int32 timeOff = 12;
  if (has_timeoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->timeoff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 shopId = 1;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shopid(), target);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required int32 sex = 3;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sex(), target);
  }

  // required int32 statisticalType = 4;
  if (has_statisticaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->statisticaltype(), target);
  }

  // required int32 useType = 5;
  if (has_usetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usetype(), target);
  }

  // required int32 sellType = 6;
  if (has_selltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->selltype(), target);
  }

  // required int32 sellQuantity = 7;
  if (has_sellquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sellquantity(), target);
  }

  // required int32 priceGold = 8;
  if (has_pricegold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pricegold(), target);
  }

  // required int32 priceCoins = 9;
  if (has_pricecoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pricecoins(), target);
  }

  // required int32 discount = 10;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->discount(), target);
  }

  // required int32 timeOn = 11;
  if (has_timeon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->timeon(), target);
  }

  // required int32 timeOff = 12;
  if (has_timeoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->timeoff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 shopId = 1;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopid());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 statisticalType = 4;
    if (has_statisticaltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statisticaltype());
    }

    // required int32 useType = 5;
    if (has_usetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usetype());
    }

    // required int32 sellType = 6;
    if (has_selltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selltype());
    }

    // required int32 sellQuantity = 7;
    if (has_sellquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellquantity());
    }

    // required int32 priceGold = 8;
    if (has_pricegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricegold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 priceCoins = 9;
    if (has_pricecoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricecoins());
    }

    // required int32 discount = 10;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount());
    }

    // required int32 timeOn = 11;
    if (has_timeon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeon());
    }

    // required int32 timeOff = 12;
    if (has_timeoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeoff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Shop::MergeFrom(const Shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_statisticaltype()) {
      set_statisticaltype(from.statisticaltype());
    }
    if (from.has_usetype()) {
      set_usetype(from.usetype());
    }
    if (from.has_selltype()) {
      set_selltype(from.selltype());
    }
    if (from.has_sellquantity()) {
      set_sellquantity(from.sellquantity());
    }
    if (from.has_pricegold()) {
      set_pricegold(from.pricegold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pricecoins()) {
      set_pricecoins(from.pricecoins());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_timeon()) {
      set_timeon(from.timeon());
    }
    if (from.has_timeoff()) {
      set_timeoff(from.timeoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shop::CopyFrom(const Shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void Shop::Swap(Shop* other) {
  if (other != this) {
    std::swap(shopid_, other->shopid_);
    std::swap(itemid_, other->itemid_);
    std::swap(sex_, other->sex_);
    std::swap(statisticaltype_, other->statisticaltype_);
    std::swap(usetype_, other->usetype_);
    std::swap(selltype_, other->selltype_);
    std::swap(sellquantity_, other->sellquantity_);
    std::swap(pricegold_, other->pricegold_);
    std::swap(pricecoins_, other->pricecoins_);
    std::swap(discount_, other->discount_);
    std::swap(timeon_, other->timeon_);
    std::swap(timeoff_, other->timeoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Shop_descriptor_;
  metadata.reflection = Shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopListResponse::kResultFieldNumber;
const int ShopListResponse::kShopFieldNumber;
#endif  // !_MSC_VER

ShopListResponse::ShopListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopListResponse::InitAsDefaultInstance() {
}

ShopListResponse::ShopListResponse(const ShopListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopListResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopListResponse::~ShopListResponse() {
  SharedDtor();
}

void ShopListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopListResponse_descriptor_;
}

const ShopListResponse& ShopListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopProto_2eproto();
  return *default_instance_;
}

ShopListResponse* ShopListResponse::default_instance_ = NULL;

ShopListResponse* ShopListResponse::New() const {
  return new ShopListResponse;
}

void ShopListResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  shop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tiange.mdsj.proto.ShopResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tiange::mdsj::proto::ShopResult_IsValid(value)) {
            set_result(static_cast< ::com::tiange::mdsj::proto::ShopResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shop;
        break;
      }

      // repeated .com.tiange.mdsj.proto.Shop shop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shop;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.tiange.mdsj.proto.ShopResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .com.tiange.mdsj.proto.Shop shop = 2;
  for (int i = 0; i < this->shop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shop(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.tiange.mdsj.proto.ShopResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .com.tiange.mdsj.proto.Shop shop = 2;
  for (int i = 0; i < this->shop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shop(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tiange.mdsj.proto.ShopResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .com.tiange.mdsj.proto.Shop shop = 2;
  total_size += 1 * this->shop_size();
  for (int i = 0; i < this->shop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopListResponse::MergeFrom(const ShopListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  shop_.MergeFrom(from.shop_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopListResponse::CopyFrom(const ShopListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < shop_size(); i++) {
    if (!this->shop(i).IsInitialized()) return false;
  }
  return true;
}

void ShopListResponse::Swap(ShopListResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    shop_.Swap(&other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopListResponse_descriptor_;
  metadata.reflection = ShopListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemDetailRequest::kItemIdFieldNumber;
#endif  // !_MSC_VER

ItemDetailRequest::ItemDetailRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemDetailRequest::InitAsDefaultInstance() {
}

ItemDetailRequest::ItemDetailRequest(const ItemDetailRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemDetailRequest::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemDetailRequest::~ItemDetailRequest() {
  SharedDtor();
}

void ItemDetailRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemDetailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemDetailRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemDetailRequest_descriptor_;
}

const ItemDetailRequest& ItemDetailRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopProto_2eproto();
  return *default_instance_;
}

ItemDetailRequest* ItemDetailRequest::default_instance_ = NULL;

ItemDetailRequest* ItemDetailRequest::New() const {
  return new ItemDetailRequest;
}

void ItemDetailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemDetailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemDetailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemDetailRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemDetailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemDetailRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemDetailRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemDetailRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemDetailRequest::MergeFrom(const ItemDetailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemDetailRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemDetailRequest::CopyFrom(const ItemDetailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemDetailRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemDetailRequest::Swap(ItemDetailRequest* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemDetailRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemDetailRequest_descriptor_;
  metadata.reflection = ItemDetailRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item::kAddedFieldNumber;
const int Item::kItemIdFieldNumber;
const int Item::kNameFieldNumber;
const int Item::kDescFieldNumber;
const int Item::kType1FieldNumber;
const int Item::kType2FieldNumber;
const int Item::kQualityFieldNumber;
const int Item::kHpFieldNumber;
const int Item::kCpFieldNumber;
const int Item::kAtkFieldNumber;
const int Item::kDefFieldNumber;
const int Item::kDexFieldNumber;
const int Item::kCriFieldNumber;
const int Item::kBlockFieldNumber;
const int Item::kAglFieldNumber;
const int Item::kStrengLevelFieldNumber;
const int Item::kInlayNumFieldNumber;
const int Item::kDiscountFieldNumber;
const int Item::kSexFieldNumber;
const int Item::kStatisticalTypeFieldNumber;
const int Item::kUseTypeFieldNumber;
const int Item::kOverlayFieldNumber;
const int Item::kValidFieldNumber;
const int Item::kDisappearsFieldNumber;
const int Item::kSellTypeFieldNumber;
const int Item::kSellQuantityFieldNumber;
const int Item::kPriceGoldFieldNumber;
const int Item::kPriceCoinsFieldNumber;
const int Item::kTimeOnFieldNumber;
const int Item::kTimeOffFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  added_ = 0;
  itemid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type1_ = 0;
  type2_ = 0;
  quality_ = 0;
  hp_ = 0;
  cp_ = 0;
  atk_ = 0;
  def_ = 0;
  dex_ = 0;
  cri_ = 0;
  block_ = 0;
  agl_ = 0;
  strenglevel_ = 0;
  inlaynum_ = 0;
  discount_ = 0;
  sex_ = 0;
  statisticaltype_ = 0;
  usetype_ = 0;
  overlay_ = 0;
  valid_ = 0;
  disappears_ = 0;
  selltype_ = 0;
  sellquantity_ = 0;
  pricegold_ = 0;
  pricecoins_ = 0;
  timeon_ = 0;
  timeoff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopProto_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    added_ = 0;
    itemid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    type1_ = 0;
    type2_ = 0;
    quality_ = 0;
    hp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cp_ = 0;
    atk_ = 0;
    def_ = 0;
    dex_ = 0;
    cri_ = 0;
    block_ = 0;
    agl_ = 0;
    strenglevel_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    inlaynum_ = 0;
    discount_ = 0;
    sex_ = 0;
    statisticaltype_ = 0;
    usetype_ = 0;
    overlay_ = 0;
    valid_ = 0;
    disappears_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    selltype_ = 0;
    sellquantity_ = 0;
    pricegold_ = 0;
    pricecoins_ = 0;
    timeon_ = 0;
    timeoff_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 added = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &added_)));
          set_has_added();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // required string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type1;
        break;
      }

      // required int32 type1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type1_)));
          set_has_type1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type2;
        break;
      }

      // required int32 type2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type2_)));
          set_has_type2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quality;
        break;
      }

      // required int32 quality = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hp;
        break;
      }

      // required int32 hp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cp;
        break;
      }

      // required int32 cp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cp_)));
          set_has_cp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_atk;
        break;
      }

      // required int32 atk = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_def;
        break;
      }

      // required int32 def = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_dex;
        break;
      }

      // required int32 dex = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dex_)));
          set_has_dex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cri;
        break;
      }

      // required int32 cri = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cri_)));
          set_has_cri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_block;
        break;
      }

      // required int32 block = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_)));
          set_has_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_agl;
        break;
      }

      // required int32 agl = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agl_)));
          set_has_agl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_strengLevel;
        break;
      }

      // required int32 strengLevel = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strengLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strenglevel_)));
          set_has_strenglevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_inlayNum;
        break;
      }

      // required int32 inlayNum = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inlayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inlaynum_)));
          set_has_inlaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_discount;
        break;
      }

      // required int32 discount = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_sex;
        break;
      }

      // required int32 sex = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_statisticalType;
        break;
      }

      // required int32 statisticalType = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statisticalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statisticaltype_)));
          set_has_statisticaltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_useType;
        break;
      }

      // required int32 useType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usetype_)));
          set_has_usetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_overlay;
        break;
      }

      // required int32 overlay = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_overlay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlay_)));
          set_has_overlay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_valid;
        break;
      }

      // required int32 valid = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_)));
          set_has_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_disappears;
        break;
      }

      // required int32 disappears = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disappears:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &disappears_)));
          set_has_disappears();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_sellType;
        break;
      }

      // required int32 sellType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selltype_)));
          set_has_selltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_sellQuantity;
        break;
      }

      // required int32 sellQuantity = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellquantity_)));
          set_has_sellquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_priceGold;
        break;
      }

      // required int32 priceGold = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricegold_)));
          set_has_pricegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_priceCoins;
        break;
      }

      // required int32 priceCoins = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricecoins_)));
          set_has_pricecoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_timeOn;
        break;
      }

      // required int32 timeOn = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeOn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeon_)));
          set_has_timeon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_timeOff;
        break;
      }

      // required int32 timeOff = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeoff_)));
          set_has_timeoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 added = 1;
  if (has_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->added(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }

  // required int32 type1 = 5;
  if (has_type1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type1(), output);
  }

  // required int32 type2 = 6;
  if (has_type2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->type2(), output);
  }

  // required int32 quality = 7;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quality(), output);
  }

  // required int32 hp = 8;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hp(), output);
  }

  // required int32 cp = 9;
  if (has_cp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cp(), output);
  }

  // required int32 atk = 10;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->atk(), output);
  }

  // required int32 def = 11;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->def(), output);
  }

  // required int32 dex = 12;
  if (has_dex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dex(), output);
  }

  // required int32 cri = 13;
  if (has_cri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->cri(), output);
  }

  // required int32 block = 14;
  if (has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->block(), output);
  }

  // required int32 agl = 15;
  if (has_agl()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->agl(), output);
  }

  // required int32 strengLevel = 16;
  if (has_strenglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->strenglevel(), output);
  }

  // required int32 inlayNum = 17;
  if (has_inlaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->inlaynum(), output);
  }

  // required int32 discount = 18;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->discount(), output);
  }

  // required int32 sex = 19;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->sex(), output);
  }

  // required int32 statisticalType = 20;
  if (has_statisticaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->statisticaltype(), output);
  }

  // required int32 useType = 21;
  if (has_usetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->usetype(), output);
  }

  // required int32 overlay = 22;
  if (has_overlay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->overlay(), output);
  }

  // required int32 valid = 23;
  if (has_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->valid(), output);
  }

  // required int32 disappears = 24;
  if (has_disappears()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->disappears(), output);
  }

  // required int32 sellType = 25;
  if (has_selltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->selltype(), output);
  }

  // required int32 sellQuantity = 26;
  if (has_sellquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->sellquantity(), output);
  }

  // required int32 priceGold = 27;
  if (has_pricegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->pricegold(), output);
  }

  // required int32 priceCoins = 28;
  if (has_pricecoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->pricecoins(), output);
  }

  // required int32 timeOn = 29;
  if (has_timeon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->timeon(), output);
  }

  // required int32 timeOff = 30;
  if (has_timeoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->timeoff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 added = 1;
  if (has_added()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->added(), target);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // required int32 type1 = 5;
  if (has_type1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type1(), target);
  }

  // required int32 type2 = 6;
  if (has_type2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->type2(), target);
  }

  // required int32 quality = 7;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quality(), target);
  }

  // required int32 hp = 8;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hp(), target);
  }

  // required int32 cp = 9;
  if (has_cp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cp(), target);
  }

  // required int32 atk = 10;
  if (has_atk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->atk(), target);
  }

  // required int32 def = 11;
  if (has_def()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->def(), target);
  }

  // required int32 dex = 12;
  if (has_dex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dex(), target);
  }

  // required int32 cri = 13;
  if (has_cri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->cri(), target);
  }

  // required int32 block = 14;
  if (has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->block(), target);
  }

  // required int32 agl = 15;
  if (has_agl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->agl(), target);
  }

  // required int32 strengLevel = 16;
  if (has_strenglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->strenglevel(), target);
  }

  // required int32 inlayNum = 17;
  if (has_inlaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->inlaynum(), target);
  }

  // required int32 discount = 18;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->discount(), target);
  }

  // required int32 sex = 19;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->sex(), target);
  }

  // required int32 statisticalType = 20;
  if (has_statisticaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->statisticaltype(), target);
  }

  // required int32 useType = 21;
  if (has_usetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->usetype(), target);
  }

  // required int32 overlay = 22;
  if (has_overlay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->overlay(), target);
  }

  // required int32 valid = 23;
  if (has_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->valid(), target);
  }

  // required int32 disappears = 24;
  if (has_disappears()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->disappears(), target);
  }

  // required int32 sellType = 25;
  if (has_selltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->selltype(), target);
  }

  // required int32 sellQuantity = 26;
  if (has_sellquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->sellquantity(), target);
  }

  // required int32 priceGold = 27;
  if (has_pricegold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->pricegold(), target);
  }

  // required int32 priceCoins = 28;
  if (has_pricecoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->pricecoins(), target);
  }

  // required int32 timeOn = 29;
  if (has_timeon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->timeon(), target);
  }

  // required int32 timeOff = 30;
  if (has_timeoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->timeoff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 added = 1;
    if (has_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->added());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required int32 type1 = 5;
    if (has_type1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type1());
    }

    // required int32 type2 = 6;
    if (has_type2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type2());
    }

    // required int32 quality = 7;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // required int32 hp = 8;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 cp = 9;
    if (has_cp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cp());
    }

    // required int32 atk = 10;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atk());
    }

    // required int32 def = 11;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->def());
    }

    // required int32 dex = 12;
    if (has_dex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dex());
    }

    // required int32 cri = 13;
    if (has_cri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cri());
    }

    // required int32 block = 14;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block());
    }

    // required int32 agl = 15;
    if (has_agl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agl());
    }

    // required int32 strengLevel = 16;
    if (has_strenglevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strenglevel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 inlayNum = 17;
    if (has_inlaynum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inlaynum());
    }

    // required int32 discount = 18;
    if (has_discount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount());
    }

    // required int32 sex = 19;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 statisticalType = 20;
    if (has_statisticaltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statisticaltype());
    }

    // required int32 useType = 21;
    if (has_usetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usetype());
    }

    // required int32 overlay = 22;
    if (has_overlay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overlay());
    }

    // required int32 valid = 23;
    if (has_valid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valid());
    }

    // required int32 disappears = 24;
    if (has_disappears()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->disappears());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 sellType = 25;
    if (has_selltype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selltype());
    }

    // required int32 sellQuantity = 26;
    if (has_sellquantity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellquantity());
    }

    // required int32 priceGold = 27;
    if (has_pricegold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricegold());
    }

    // required int32 priceCoins = 28;
    if (has_pricecoins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricecoins());
    }

    // required int32 timeOn = 29;
    if (has_timeon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeon());
    }

    // required int32 timeOff = 30;
    if (has_timeoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeoff());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_added()) {
      set_added(from.added());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_type1()) {
      set_type1(from.type1());
    }
    if (from.has_type2()) {
      set_type2(from.type2());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cp()) {
      set_cp(from.cp());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_dex()) {
      set_dex(from.dex());
    }
    if (from.has_cri()) {
      set_cri(from.cri());
    }
    if (from.has_block()) {
      set_block(from.block());
    }
    if (from.has_agl()) {
      set_agl(from.agl());
    }
    if (from.has_strenglevel()) {
      set_strenglevel(from.strenglevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_inlaynum()) {
      set_inlaynum(from.inlaynum());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_statisticaltype()) {
      set_statisticaltype(from.statisticaltype());
    }
    if (from.has_usetype()) {
      set_usetype(from.usetype());
    }
    if (from.has_overlay()) {
      set_overlay(from.overlay());
    }
    if (from.has_valid()) {
      set_valid(from.valid());
    }
    if (from.has_disappears()) {
      set_disappears(from.disappears());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_selltype()) {
      set_selltype(from.selltype());
    }
    if (from.has_sellquantity()) {
      set_sellquantity(from.sellquantity());
    }
    if (from.has_pricegold()) {
      set_pricegold(from.pricegold());
    }
    if (from.has_pricecoins()) {
      set_pricecoins(from.pricecoins());
    }
    if (from.has_timeon()) {
      set_timeon(from.timeon());
    }
    if (from.has_timeoff()) {
      set_timeoff(from.timeoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x3fffffff) != 0x3fffffff) return false;

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(added_, other->added_);
    std::swap(itemid_, other->itemid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(type1_, other->type1_);
    std::swap(type2_, other->type2_);
    std::swap(quality_, other->quality_);
    std::swap(hp_, other->hp_);
    std::swap(cp_, other->cp_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(dex_, other->dex_);
    std::swap(cri_, other->cri_);
    std::swap(block_, other->block_);
    std::swap(agl_, other->agl_);
    std::swap(strenglevel_, other->strenglevel_);
    std::swap(inlaynum_, other->inlaynum_);
    std::swap(discount_, other->discount_);
    std::swap(sex_, other->sex_);
    std::swap(statisticaltype_, other->statisticaltype_);
    std::swap(usetype_, other->usetype_);
    std::swap(overlay_, other->overlay_);
    std::swap(valid_, other->valid_);
    std::swap(disappears_, other->disappears_);
    std::swap(selltype_, other->selltype_);
    std::swap(sellquantity_, other->sellquantity_);
    std::swap(pricegold_, other->pricegold_);
    std::swap(pricecoins_, other->pricecoins_);
    std::swap(timeon_, other->timeon_);
    std::swap(timeoff_, other->timeoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemDetailResponse::kResultFieldNumber;
const int ItemDetailResponse::kItemFieldNumber;
#endif  // !_MSC_VER

ItemDetailResponse::ItemDetailResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemDetailResponse::InitAsDefaultInstance() {
  item_ = const_cast< ::com::tiange::mdsj::proto::Item*>(&::com::tiange::mdsj::proto::Item::default_instance());
}

ItemDetailResponse::ItemDetailResponse(const ItemDetailResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemDetailResponse::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemDetailResponse::~ItemDetailResponse() {
  SharedDtor();
}

void ItemDetailResponse::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ItemDetailResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemDetailResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemDetailResponse_descriptor_;
}

const ItemDetailResponse& ItemDetailResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ShopProto_2eproto();
  return *default_instance_;
}

ItemDetailResponse* ItemDetailResponse::default_instance_ = NULL;

ItemDetailResponse* ItemDetailResponse::New() const {
  return new ItemDetailResponse;
}

void ItemDetailResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::com::tiange::mdsj::proto::Item::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemDetailResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.tiange.mdsj.proto.ShopResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::tiange::mdsj::proto::ShopResult_IsValid(value)) {
            set_result(static_cast< ::com::tiange::mdsj::proto::ShopResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // required .com.tiange.mdsj.proto.Item item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemDetailResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .com.tiange.mdsj.proto.ShopResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // required .com.tiange.mdsj.proto.Item item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemDetailResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .com.tiange.mdsj.proto.ShopResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // required .com.tiange.mdsj.proto.Item item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemDetailResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.tiange.mdsj.proto.ShopResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // required .com.tiange.mdsj.proto.Item item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemDetailResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemDetailResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemDetailResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemDetailResponse::MergeFrom(const ItemDetailResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_item()) {
      mutable_item()->::com::tiange::mdsj::proto::Item::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemDetailResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemDetailResponse::CopyFrom(const ItemDetailResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemDetailResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void ItemDetailResponse::Swap(ItemDetailResponse* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemDetailResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemDetailResponse_descriptor_;
  metadata.reflection = ItemDetailResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace mdsj
}  // namespace tiange
}  // namespace com

// @@protoc_insertion_point(global_scope)
